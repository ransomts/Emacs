#+AUTHOR: Tim Ransom
#+TITLE: emacs configuration

* Add load path

  Here we start off with some black magic. Lexical bindings let me use a higher order functions when elisp's dynamic bindings don't. 
  #+BEGIN_SRC emacs-lisp
    ;; -*- lexical-binding: t -*-
  #+END_SRC

  Just a couple of functions to help sort what machine and network the config is being loaded on. So long as the emacs version is >24 I think this should be sufficient to use filter packages and settings between setups.
  #+BEGIN_SRC emacs-lisp
    (defun running-on-hosts (hosts)
      (member*
       (car (split-string ; split the hostname on '.' for complex hostnames
	     (car (split-string ; remove trailing newline from `hostname`
		   (shell-command-to-string "hostname") "\n")) "\\."))
       hosts
       :test '(lambda (x y) (string-match-p y x))))

    (defun running-on-wireless (essids)
      (member (shell-command-to-string "iwgetid --raw") essids))

    (defun running-on-windows ()
      (string= system-type "windows-nt"))
  #+END_SRC

  And these are the functions to determine the workspace mappings to physical screens.
  #+BEGIN_SRC emacs-lisp
    (defun workspace-string-mappings (x y)
      (if (= x 0) y
	(if (<= x y) x (% (- x (% (+ 10 y) y)) y))))

    (defun number-to-monitor (x)
      (let ((y (- x 1))
	    (host (shell-command-to-string "hostname")))
	(cond ((string= host "tengen\n") (nth y '("HDMI-1" "DVI-D-1" "DP-1" "DP-2" "DP-3")))
	      ((string= host "hoshi\n") (nth y '("DP-1" "HDMI-1" "DP-2"))))))

    (defun number-of-screens ()
      (string-to-number
       (shell-command-to-string
	"xrandr --listactivemonitors | grep Monitors | cut -d ' ' -f2")))

    (defun flatten (list-of-lists)
      (apply #'append list-of-lists))

     (defun workspace-screen-mapping ()
       (flatten (loop for workspace in '(1 2 3 4 5 6 7 8 9 0)
		      collect (list workspace (number-to-monitor (workspace-string-mappings workspace (number-of-screens)))))))
  #+END_SRC

  I use syncthing to move some of the 'live' files emacs uses between machines. If I'm on a machine that hasn't had these folders made, create them.
  #+BEGIN_SRC emacs-lisp
    (mapc (lambda (dir) (make-directory (concat user-emacs-directory dir) t))
	  '("org" "gnus" ".sx" "hackernews"))
  #+END_SRC

  One last bootstrap, gotta load up use-package for good load times. This also adds any directories that might not be available through the usual methods like dired+.
  #+BEGIN_SRC emacs-lisp
    (let ((default-directory  "~/.emacs.d/packages/"))
      (normal-top-level-add-subdirs-to-load-path))

    (require 'use-package)
  #+END_SRC

* Packages
** Built In
*** gnus

    I use gnus mostly as an rss reader, but have the email there too if I want to fire off a quick note.
    #+BEGIN_SRC emacs-lisp
      (use-package gnus
	:bind ("C-M-g" . #'gnus)
	:custom
	(gnus-always-read-dribble-file t)
	(gnus-directory "~/.emacs.d/gnus")
	:config
	(setq-default
	 gnus-summary-line-format "%U%R%z %(%&user-date; %[%-23,23f%]  %B%s%)\n"
	 gnus-user-date-format-alist '((t . "%m-%d %H:%M"))
	 gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references
	 gnus-thread-sort-functions '(gnus-thread-sort-by-date)
	 gnus-sum-thread-tree-false-root ""
	 gnus-sum-thread-tree-indent " "
	 gnus-sum-thread-tree-leaf-with-other "├► "
	 gnus-sum-thread-tree-root ""
	 gnus-sum-thread-tree-single-leaf "╰► "
	 gnus-sum-thread-tree-vertical "│"))
      (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
    #+END_SRC

**** TODO scan daemon
     #+BEGIN_SRC emacs-lisp
       ;; (use-package gnus-demon
       ;;   :ensure t
       ;;   :hook
       ;;   (gnus-demon-add-handler #'gnus-demon-scan-news 2 nil)
       ;;   (message "from hook")
       ;;   )
     #+END_SRC

*** elisp
#+BEGIN_SRC emacs-lisp
  (use-package elisp-mode
    :bind
    (("C-x C-e" . pp-eval-last-sexp)
    ("<C-M-backspace>" . backward-kill-sexp))
    :config (enable-paredit-mode))
#+END_SRC
*** org
    #+BEGIN_SRC emacs-lisp
      (use-package org
	:config
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '(
	   (awk . t)
	   (C . t)
	   (ditaa . t)
	   (dot . t)
	   (emacs-lisp . t)
	   (gnuplot . t)
	   (haskell . t)
	   (java . t)
	   (lisp . t)
	   (makefile . t)
	   (python . t)
	   (sh . t)
	   (sql . t)
	   (sqlite . t)))

	(require 'org-crypt)
	(org-crypt-use-before-save-magic)

	(setq diary-file "~/.emacs.d/org/schedule.org"
	      org-agenda-files
	      (directory-files (concat user-emacs-directory "org") t
			       "\\(?:\\(?:research\\|\\.*-gcal\\|schedule\\|scratch\\|todo\\)\\.org\\)")
	      org-agenda-use-time-grid nil
	      org-archive-location "~/.emacs.d/org/archive.org::* From %s"
	      org-capture-after-finalize-hook nil
	      org-capture-templates '(("t" "Todo" entry
				       (file+headline "~/.emacs.d/org/todo.org" "Tasks")
				       "* TODO %?\nEntered on %T\n%i\n%a")
				      ("e" "Event" entry
				       (file "~/.emacs.d/org/schedule.org")
				       "* %?\nDate %^t")
				      ("b" "Fix Bug" checkitem
				       (file+headline "~/.emacs.d/org/todo.org" "Bugs")
				       "[ ] %?\n%A\nEntered on %T")
				      ("n" "General notes" entry
				       (file+headline "~/.emacs.d/org/scratch.org" "Notes")
				       "* Note %?\n%T\n")
				      ("a" "Appointment" entry (file  "~/.emacs.d/org/ransomtim8078-gcal.org" )
				       "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n"))
	      org-clock-sound t
	      org-confirm-babel-evaluate nil
	      org-datetree-add-timestamp 'inactive
	      org-default-notes-file "~/.emacs.d/org/todo.org"
	      org-directory "~/.emacs.d/org"
	      org-hide-leading-stars t
	      org-highlight-latex-and-related '(latex)
	      org-journal-dir "~/.emacs.d/org/journal"
	      org-log-done 'time
	      org-outline-path-complete-in-steps nil
	      org-preview-latex-image-directory "~/.emacs.d/ltxpng/"
	      org-refile-targets '((org-agenda-files :maxlevel . 2))
	      org-refile-use-outline-path 'file
	      org-src-fontify-natively t
	      org-src-tab-acts-natively t
	      org-startup-with-latex-preview t
	      org-todo-keyword-faces
	      '(("SOON"
		 :foreground "blue"
		 :background "sky blue"
		 :weight bold)
		("DONE"
		 :foreground "darkseagreen4"
		 :background "darkseagreen2"
		 :weight bold))
	      org-todo-keywords '((sequence "TODO" "SOON" "DONE")))

	:bind
	(("C-c a" . #'org-agenda)
	 ("C-c c" . #'org-capture)
	 ("C-c 1" . #'org-encrypt-entry)
	 ("C-c 2" . #'org-decrypt-entry)
	 (:map org-mode-map
	       (("C-c r" . #'org-archive-subtree)
		("C-c C-r" . #'org-archive-subtree)))))
    #+END_SRC

**** org exports
     #+BEGIN_SRC emacs-lisp
       (use-package ox-hugo
	 :ensure t
	 :after ox)

       (use-package ox-beamer
	 :after ox)
     #+END_SRC

**** IEEE latex class

     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load 'ox-latex
	 (add-to-list 'org-latex-classes
		      '("IEEEtran"
			"\\documentclass[11pt]{IEEEtran}"
			("\\section{%s}" . "\\section*{%s}")
			("\\subsection{%s}" . "\\subsection*{%s}")
			("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			("\\paragraph{%s}" . "\\paragraph*{%s}")
			("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
     #+END_SRC

**** async src blocks
     #+BEGIN_SRC emacs-lisp
       (use-package ob-async
	 :ensure t
	 :after org)
     #+END_SRC

**** bullets
     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
	 :ensure t
	 :hook (org-mode . org-bullets-mode))
     #+END_SRC

*** erc

    IRC is a really valuable resource that is being used less and less. Having people to answer random technical questions is so nice when working on something and nobody around can help.
    #+BEGIN_SRC emacs-lisp
      (use-package erc
	:custom
	(erc-autojoin-channels-alist (quote (("freenode.net"))))
	(erc-autojoin-mode nil)
	(erc-autojoin-timing (quote ident))
	(erc-hide-list (quote ("JOIN" "PART" "NICK" "QUIT")))
	(erc-hide-timestamps t)
	(erc-list-mode t)
	(erc-log-channels-directory "~/.emacs.d/erc_log")
	(erc-log-mode t)
	(erc-log-write-after-insert t)
	(erc-log-write-after-send t)
	(erc-modules
	 '(autojoin button completion dcc fill irccontrols keep-place
		    list log match menu move-to-prompt netsplit networks
		    noncommands notifications readonly ring services sound
		    stamp track))
	(erc-nick "tinhatcat")
	(erc-prompt "<tinhatcat>")
	(erc-sound-mode t))

      (use-package erc-twitch
	:disabled
	:after erc
	:config
	(setq erc-twitch-networks (quote ("irc.chat.twitch.tv")))
	(erc-twitch-mode))
    #+END_SRC

*** dired
    #+BEGIN_SRC emacs-lisp
      (defun ransom/open-home ()
	(interactive)
	(dired (getenv "HOME")))

      (use-package dired+
	:bind (:map dired-mode-map
		    (("M-h" . #'dired-omit-mode)
		     ("~" . #'ransom/open-home)
		     ("u" . #'dired-up-directory)))
	:custom
	(dired-listing-switches "-alh --no-group")
	(dired-no-confirm '(byte-compile copy delete))
	(dired-omit-files "^\\..*~?$")
	(dired-recursive-copies 'always)
	(dired-recursive-deletes 'always))

      (global-set-key (kbd "C-c d") (lambda () (interactive) (dired default-directory)))
    #+END_SRC

**** dired subtree

     #+BEGIN_SRC emacs-lisp
       (use-package dired-subtree
	 :ensure t
	 :after dired
	 :config
	 (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
	 (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
     #+END_SRC

*** eshell
    #+BEGIN_SRC emacs-lisp
      (defmacro with-face (str &rest properties)
	`(propertize ,str 'face (list ,@properties)))

      (defun my-eshell-prompt ()
	(let ((header-bg (if (find 'material-light custom-enabled-themes)
			     "#e0f7fa"
			   "#1c1f26"))
	      (host (file-remote-p default-directory 'host)))
					      ;(host (nth 1 (split-string (eshell/pwd) ":"))))
	  (concat
	   (with-face (concat (eshell/pwd) " ") :background header-bg)
	   (with-face (format-time-string "(%H:%M) " (current-time)) :background header-bg :foreground "#888")
	   (with-face "\n" :background header-bg)
	   (with-face user-login-name :foreground "blue")
	   "@"
	   (with-face (if (eq nil host) "localhost" host) :foreground "green")
	   (if (= (user-uid) 0)
	       (with-face " #" :foreground "red")
	     " $")
	   " ")))

      (use-package eshell
	:bind ("C-x e" . #'eshell)
	:custom
	(eshell-prompt-function 'my-eshell-prompt)
	(eshell-highlight-prompt nil)
	(eshell-cmpl-ignore-case t)
	(eshell-highlight-prompt nil)
	(eshell-destroy-buffer-when-process-dies t)
	(eshell-visual-commands
	 '("alsamixer"
	   "glances"
	   "htop"
	   "less"
	   "more"
	   "ncdu" "nethogs" "nmon"
	   "pacmixer"
	   "radeontop" "rtv"
	   "screen"
	   "top"
	   "vi" "vim")))

      (defun eshell-load-bash-aliases ()
	"Reads bash aliases from Bash and inserts
      them into the list of eshell aliases."
	(interactive)
	(progn
	  (message "Parsing aliases")
	  (shell-command "alias" "bash-aliases" "bash-errors")
	  (switch-to-buffer "bash-aliases")
	  (replace-string "alias " "")
	  (goto-char 1)
	  (replace-string "='" " ")
	  (goto-char 1)
	  (replace-string "'\n" "\n")
	  (goto-char 1)
	  (let ((alias-name) (command-string) (alias-list))
	    (while (not (eobp))
	      (while (not (char-equal (char-after) 32))
		(forward-char 1))
	      (setq alias-name
		    (buffer-substring-no-properties (line-beginning-position) (point)))
	      (forward-char 1)
	      (setq command-string
		    (buffer-substring-no-properties (point) (line-end-position)))
	      (setq alias-list (cons (list alias-name command-string) alias-list))
	      (forward-line 1))
	    (setq eshell-command-aliases-list alias-list))
	  (if (get-buffer "bash-aliases")(kill-buffer "bash-aliases"))
	  (if (get-buffer "bash-errors")(kill-buffer "bash-errors"))))

      (add-hook 'eshell-mode-hook 'eshell-load-bash-aliases)
    #+END_SRC

** External

*** Package updater
    #+BEGIN_SRC emacs-lisp
      (use-package auto-package-update
	:ensure t
	:custom
	(auto-package-update-prompt-before-update t)
	(auto-package-update-delete-old-versions t)
	(auto-package-update-interval 90)
	:config
	(auto-package-update-maybe))
    #+END_SRC

*** Dad-joke

    This is top tier package-age here.
    #+BEGIN_SRC emacs-lisp
      (use-package dad-joke :ensure t)
    #+END_SRC

*** Theme

    I really like themes that have light and dark modes. The material theme fits that and has been my theme of choice for a few years.
    #+BEGIN_SRC emacs-lisp
      (use-package material-theme
	:unless (running-on-hosts '("login001"))
	:ensure t
	:config
	(load-theme 'material t))
    #+END_SRC

    Switch between the light and dark modes on sunrise and sunset. Lets me know what the sun is doing even when I spend all day inside :)
    #+BEGIN_SRC emacs-lisp
      (use-package theme-changer
	:unless (running-on-hosts '("login001"))
	:ensure t
	:custom
	(calendar-latitude 34.67)
	(calendar-location-name "Clemson, SC")
	(calendar-longitude -82.84)
	:config (change-theme 'material-light 'material))
    #+END_SRC

*** helm

    Helm is really a game changer for emacs. More over, it's the helm extensions that can really turn something tedious to easy.
    #+BEGIN_SRC emacs-lisp
      (when (>= (string-to-number emacs-version) 24.4)
	(use-package helm
	  :ensure t
	  :bind (("M-x"   . #'helm-M-x)
		 ("C-x b" . #'helm-buffers-list)
		 ("C-x f" . #'helm-find-files)
		 ("C-x C-f" . #'helm-find-files)
		 ("M-y"   . #'helm-show-kill-ring)
		 ("C-c m" . #'helm-man-woman)
		 ("C-c l" . #'helm-locate)
		 ("C-c e" . #'helm-regexp)
		 ("C-c g" . #'helm-google-suggest))
	  :config
	  (helm-mode t)))
    #+END_SRC

**** tramp

     Reads in [[file:~/.ssh/config][my ssh config]] and connects me without needing to remember the trmp syntax.
     #+BEGIN_SRC emacs-lisp
       (when (>= (string-to-number emacs-version) 24.4)
	 (use-package helm-tramp
	   :unless (running-on-hosts '("login001"))
	   :ensure t
	   :requires helm))
     #+END_SRC

**** bbdb

     This seems to be the most accepted way to manage contact info with emacs. It works well with mail and gnus though so it's okay with me.
     #+BEGIN_SRC emacs-lisp
       (when (>= (string-to-number emacs-version) 24.4)
	 (use-package helm-bbdb
	   :unless (running-on-hosts '("login001"))
	   :ensure t
	   :requires helm
	   :bind (("<f5>" . #'helm-bbdb))))
     #+END_SRC

**** dictionary

     Every computer used for writing should have a dictionary available by keystroke.

     Also remember that =C-w= in a helm session inserts the word at point.
     #+BEGIN_SRC emacs-lisp
       (when (>= (string-to-number emacs-version) 24.4)
	 (use-package helm-dictionary
	   :unless (running-on-hosts '("login001"))
	   :requires helm
	   :ensure t
	   :bind (("<f8>" . #'helm-dictionary))
	   :custom
	   (helm-dictionary-browser-function 'browse-url-chrome)
	   (helm-dictionary-database "/usr/share/dict/words")
	   (helm-dictionary-online-dicts
	    '(("wiktionary" . "http://en.wiktionary.org/wiki/%s")
	      ("Oxford English Dictionary" . "www.oed.com/search?searchType=dictionary&q=%s")
	      ("Merriam-Webster" . "https://www.merriam-webster.com/dictionary/%s")))
	   (helm-dictionary-use-full-frame nil)))
     #+END_SRC

*** magit

    Great way to interact with git. Not much config needed, just a global keybinding to pop open the status.
    #+BEGIN_SRC emacs-lisp
      (when (>= (string-to-number emacs-version) 25.1)
	(use-package magit
	  :ensure t
	  :unless (running-on-windows)
	  :bind ("C-x g" . #'magit-status)))

      (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    #+END_SRC

*** pdf
    #+BEGIN_SRC emacs-lisp
      (use-package pdf-tools
	:ensure t
	:unless (or (string= nil (getenv "DESKTOP_SESSION")) 
		    (running-on-hosts '("login001")))
	:load-path "site-lisp/pdf-tools/lisp"
	:magic ("%PDF" . pdf-view-mode)
	:config
	(pdf-tools-install)
	(setq pdf-misc-print-programm "/usr/bin/gtklp"))
    #+END_SRC

*** epub
    #+BEGIN_SRC emacs-lisp
      (use-package nov
	:ensure t
	:unless (or (string= nil (getenv "DESKTOP_SESSION"))
		    (running-on-hosts '("login001")))
	:magic ("%EPUB" . nov-mode))
    #+END_SRC

*** dashboard

    This dashboard pairs really well with exwm but has been a bit of a pain to set up.
    For now I'm still choosing an org-mode scratch buffer but this is a todo.
    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
	:ensure t
	:if (getenv "DESKTOP_SESSION")
	:config
	(dashboard-setup-startup-hook)
	:custom
	(show-week-agenda-p t)
	(dashboard-items '((recents  . 5)
			   (agenda . 5)
			   (bookmarks . 5)
			   (registers . 5))))
      ;; todo: make (todos . 5) source
    #+END_SRC

*** transmission
    #+BEGIN_SRC emacs-lisp
      (when (>= (string-to-number emacs-version) 24.4)
	(use-package transmission
	  :ensure t
	  :if (running-on-hosts '("joseki" "tengen"))
	  :custom
	  (transmission-refresh-modes
	   '(transmission-mode
	     transmission-files-mode
	     transmission-info-mode
	     transmission-peers-mode))))
    #+END_SRC

*** spotify
    This just controls spotify, searching and account specific stuff still needs done through the desktop application.

    #+BEGIN_SRC emacs-lisp
      (use-package spotify :ensure t
	:if (running-on-hosts '("tengen" "hoshi" "atari" "joseki"))
	:unless (or (running-on-windows) (running-on-hosts '("tengen-windows")))
	:bind (("C-c s c" . #'spotify-current)
	       ("C-c s SPC" . #'spotify-playpause)
	       ("C-c s n" . #'spotify-next)
	       ("C-c s p" . #'spotify-previous))
	:config
	(spotify-enable-song-notifications))
    #+END_SRC

*** hackernews

    #+BEGIN_SRC emacs-lisp
      (use-package hackernews
	:ensure t
	:bind ("C-c h" . #'hackernews))
    #+END_SRC

*** stack overflow

    #+BEGIN_SRC emacs-lisp
      (use-package sx
	:ensure t
	:bind ("C-c x" . #'sx-tab-all-questions))
    #+END_SRC

*** wikipedia

    #+BEGIN_SRC emacs-lisp
      (use-package wiki-summary
	:defer 1
	:bind ("C-c w" . wiki-summary)
	:ensure t
	:preface
	(defun my/format-summary-in-buffer (summary)
	  "Given a summary, stick it in the *wiki-summary* buffer and display the buffer"
	  (let ((buf (generate-new-buffer "*wiki-summary*")))
	    (with-current-buffer buf
	      (princ summary buf)
	      (fill-paragraph)
	      (goto-char (point-min))
	      (text-mode)
	      (view-mode))
	    (pop-to-buffer buf))))

      (advice-add 'wiki-summary/format-summary-in-buffer :override #'my/format-summary-in-buffer)
    #+END_SRC

*** emms
    #+BEGIN_SRC emacs-lisp
      (use-package emms
	:if (running-on-hosts '("joseki" "tengen"))
	:ensure t
	:custom
	(emms-cache-get-function 'emms-cache-get)
	(emms-cache-modified-function 'emms-cache-dirty)
	(emms-cache-set-function 'emms-cache-set)
	(emms-info-functions '(emms-info-mediainfo
			       emms-info-mpd emms-info-cueinfo
			       emms-info-ogginfo))
	(emms-mode-line-cycle t)
	(emms-mode-line-mode-line-function 'emms-mode-line-cycle-mode-line-function)
	(emms-player-mpd-music-directory "/home/tsranso/Music")
	(emms-player-mplayer-command-name "mpv")
	(emms-player-next-function 'emms-score-next-noerror)
	(emms-playlist-default-major-mode 'emms-playlist-mode)
	(emms-playlist-update-track-function 'emms-playlist-mode-update-track-function)
	(emms-track-description-function 'emms-info-track-description))
    #+END_SRC

*** bbdb

    #+BEGIN_SRC emacs-lisp
      (use-package bbdb
	:ensure t
	:custom
	(bbdb-dial-function
	 (lambda
	   (phone-number)
	   (kdeconnect-send-sms
	    (read-string "Enter message: ")
	    (string-to-int
	     (replace-regexp-in-string "[() -]" "" phone-number))))))
    #+END_SRC

*** slime

    Everybody who wants to dive into lisp should use slime. Even if just for learning differences between the lisps, slime is the way to go for lisp dev.
    #+BEGIN_SRC emacs-lisp
      (use-package slime
	:ensure t
	:custom
	(inferior-lisp-program "sbcl")
	(slime-contribs '(slime-fancy)))
    #+END_SRC

*** smart mode line
    #+BEGIN_SRC emacs-lisp
      (use-package smart-mode-line
	:ensure t
	:custom
	(sml/theme 'respectful)
	(sml/no-confirm-load-theme t)
	:config
	(sml/setup)
	(setq sml/name-width 30))
    #+END_SRC

*** cmake

    #+BEGIN_SRC emacs-lisp
      (use-package cmake-mode :ensure t)
    #+END_SRC

*** gnuplot

    #+BEGIN_SRC emacs-lisp
      (use-package gnuplot :ensure t)
    #+END_SRC

*** deadgrep

#+BEGIN_SRC emacs-lisp
  (use-package deadgrep :ensure t
    :bind ("C-c g" . #'deadgrep))
#+END_SRC
*** Google Calendar

    #+BEGIN_SRC emacs-lisp
      (use-package org-gcal
	:ensure t
	:config
	(setq org-gcal-client-id "819418314073-8pnmvge9jmpu6jf2hktbuo8m5gakuoeu.apps.googleusercontent.com"
	      org-gcal-client-secret "lMo_aNdgaa-_dFWmzrBVi5VO"
	      org-gcal-file-alist '(("ransomtim8078@gmail.com" .  "~/.emacs.d/org/ransomtim8078-gcal.org")
				    ("tsranso@g.clemson.edu" .  "~/.emacs.d/org/tsranso-gcal.org")
				    ("g.clemson.edu_h14th1n5kst3v1eq1mifc91bcg@group.calendar.google.com" . "~/.emacs.d/org/schedule.org")
				    ("socclemson@gmail.com" . "~/.emacs.d/org/SoC-gcal.org"))))

      (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
      (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

      (setq org-agenda-custom-commands
	    '(("c" "Simple agenda view"
	       ((agenda "")
		(alltodo "")))))
    #+END_SRC

* Moving around

  Here are just about my only modifications to ordinary bindings. Mostly just convienience and intution things.
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c u")   #'org-babel-detangle)
    (global-set-key (kbd "M-o")     #'other-window)
    (global-set-key (kbd "M-h")     #'backward-kill-word)                   
    (global-set-key (kbd "C-x k")   #'kill-this-buffer)                     
    (global-set-key (kbd "C-x C-k") #'kill-this-buffer)                     
    (global-set-key (kbd "C-h")     #'delete-backward-char)                 
    (global-set-key (kbd "C-x 2")                                           
		    (lambda ()                                              
		      (interactive)                                         
		      (split-window-vertically)                             
		      (other-window 1)))
    (global-hl-line-mode t)
  #+END_SRC

  Flashes the cursor when a long jump is acted
  #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :if (display-graphic-p)
      :ensure t
      :config
      (beacon-mode 1))
  #+END_SRC

** focus follows mouse
   #+BEGIN_SRC emacs-lisp
     (setq mouse-autoselect-window t
	   focus-follows-mouse t)
   #+END_SRC

** which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :custom (which-key-idle-delay 3.0)
       :config (which-key-mode))
   #+END_SRC

** smartparens

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :hook (prog-mode . turn-off-smartparens-strict-mode))
   #+END_SRC

** Hide show minor mode

   #+BEGIN_SRC emacs-lisp
     (use-package hs-minor-mode
       :hook prog-mode
       :bind (:map hs-minor-mode-map
		   ("C-c b h" . hs-hide-block)
		   ("C-c s" . hs-show-block)
		   ("C-c h" . hs-hide-block)
		   ("C-c b s" . hs-show-block)
		   ("C-c C-b h" . hs-hide-block)
		   ("C-c C-b s" . hs-show-block)))
   #+END_SRC

* Buffer Management

** ibuffer

   #+BEGIN_SRC emacs-lisp
	  (use-package ibuffer
	    :ensure t
	    :bind ("C-x C-b" . #'ibuffer)
	    :config
	    ;; Use human readable Size column instead of original one
	    (define-ibuffer-column size-h
	      (:name "Size" :inline t)
	      (cond
	       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
	       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
	       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
	       (t (format "%8d" (buffer-size)))))

	    ;; Modify the default ibuffer-formats
	    (setq ibuffer-formats
		  '((mark modified read-only " "
			  (name 18 18 :left :elide)
			  " "
			  (size-h 9 -1 :right)
			  " "
			  (mode 16 16 :left :elide)
			  " "
			  filename-and-process)))

	    (setq mp/ibuffer-collapsed-groups (list "helm" "tramp"))

	    (defadvice ibuffer (after collapse-helm)
	      (dolist (group mp/ibuffer-collapsed-groups)
		(progn
		  (goto-char 1)
		  (when (search-forward (concat "[ " group " ]") (point-max) t)
		    (progn
		      (move-beginning-of-line nil)
		      (ibuffer-toggle-filter-group)))))
	      (goto-char 1)
	      (search-forward "[ " (point-max) t))

	    (ad-activate 'ibuffer)

	    :custom
	    (ibuffer-default-sorting-mode 'major-mode)
	    (ibuffer-saved-filter-groups
	     '(("exwm"
		("exwm" (mode . exwm-mode))
		("dired" (mode . dired-mode))
		("org" (or (mode . org-mode)
			   (filename . "OrgMode")))
		("erc" (mode . erc-mode))
		("magit" (name . "magit\*"))
		("subversion" (name . "\*svn"))
		("customize" (mode . Custom))
		("compilations" (mode . Compilation))
     ;	   ("transmission" (or
     ;			    (mode . Transmission)
     ;			    (mode . Transmission-Info)
     ;			    (mode . Transmission-Files))
		("helm" (mode . helm-major-mode))
		("tramp" (name . "\*tramp\*"))
		("eshell" (name . "\*eshell"))
		("gnus" (or
			 (mode . message-mode)
			 (mode . bbdb-mode)
			 (mode . mail-mode)
			 (mode . gnus-group-mode)
			 (mode . gnus-summary-mode)
			 (mode . gnus-article-mode)
			 (name . "^\\.bbdb$")
			 (name . "^\\.newsrc-dribble")))
		("help" (or (name . "\*Help\*")
			    (name . "\*Apropos\*")
			    (name . "\*info\*"))))))
	    (ibuffer-expert t)
	    (ibuffer-show-empty-filter-groups nil)
	    (ibuffer-formats
	     '((mark modified read-only " "
		     (name 30 30 :left :elide)
		     " "
		     (size-h 9 -1 :right)
		     " "
		     (mode 16 16 :left :elide)
		     " " filename-and-process))))
   #+END_SRC

*** ibuffer hooks

    #+BEGIN_SRC emacs-lisp
      (add-hook 'ibuffer-mode-hook
		(lambda ()
		  (ibuffer-auto-mode 1)
		  (ibuffer-switch-to-saved-filter-groups "exwm")))
    #+END_SRC

** transpose windows

   Transposing is surprisingly not a built in function. Here's something that lets me move the current buffer around in the frame.
   #+BEGIN_SRC emacs-lisp
     (defun transpose-windows (arg)
       "Transpose the buffers shown in two windows."
       (interactive "p")
       (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
	 (while (/= arg 0)
	   (let ((this-win (window-buffer))
		 (next-win (window-buffer (funcall selector))))
	     (set-window-buffer (selected-window) next-win)
	     (set-window-buffer (funcall selector) this-win)
	     (select-window (funcall selector)))
	   (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

     (global-set-key (kbd "C-x t") #'transpose-windows)
   #+END_SRC

** toggle frame split

   Likewise switching from vertical to horizantal (and back). Really should be built it.
   #+BEGIN_SRC emacs-lisp
     (defun toggle-frame-split ()
       "If the frame is split vertically, split it horizontally or vice versa.
     Assumes that the frame is only split into two."
       (interactive)
       (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
       (let ((split-vertically-p (window-combined-p)))
	 (delete-window) ; closes current window
	 (if split-vertically-p
	     (split-window-horizontally)
	   (split-window-vertically))
	 (switch-to-buffer nil)))

     (global-set-key (kbd "C-c |") 'toggle-frame-split)
   #+END_SRC

** edit current buffer as root

   #+BEGIN_SRC emacs-lisp
     (defun edit-as-su (&optional arg)
       "Edit currently visited file as root.

     With a prefix ARG prompt for a file to visit.
     Will also prompt for a file to visit if current
     buffer is not visiting a file."
       (interactive "P")
       (if (or arg (not buffer-file-name))
	   (find-file (concat "/sudo:root@localhost:"
			      (ido-read-file-name "Find file(as root): ")))
	 (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

     (global-set-key (kbd "C-c o") #'edit-as-su)
   #+END_SRC

* general emacs settings
** asynchronous
   Gotta use the few async operations we have
   #+BEGIN_SRC emacs-lisp
     (use-package async
       :ensure t
       :config
       (dired-async-mode 1)
       (async-bytecomp-package-mode 1))
   #+END_SRC

** time and date
   #+BEGIN_SRC emacs-lisp
     (setq calendar-mark-diary-entries-flag t
	   display-time-24hr-format t
	   display-time-default-load-average nil)

     (display-time-mode t)
   #+END_SRC

** window behavior
   #+BEGIN_SRC emacs-lisp
     ;; (setq 
     ;;       use-dialog-box nil
     ;;       line-number-mode t
     ;;       column-number-mode t)

     (tooltip-mode 0)
     ;(fringe-mode 1)
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (scroll-bar-mode 0)
   #+END_SRC

   #+RESULTS:

** cursor behavior
   #+BEGIN_SRC emacs-lisp
     (setq x-stretch-cursor t
	   sentence-end-double-space nil
	   tab-width 4)

     (show-paren-mode t)
   #+END_SRC

** trash behavior
   #+BEGIN_SRC emacs-lisp
     (setq delete-by-moving-to-trash t
	   trash-directory "/home/tsranso/.local/share/Trash/files/")
   #+END_SRC

** initialization
   #+BEGIN_SRC emacs-lisp
     (setq 
					     ;initial-buffer-choice (lambda nil (get-buffer "*dashboard*"))
      initial-buffer-choice (lambda nil (get-buffer "*scratch*"))
      initial-major-mode 'org-mode
      initial-scratch-message (concat (format-time-string "%Y-%m-%d")
				      "

     "))
   #+END_SRC

** proced
   #+BEGIN_SRC emacs-lisp
     (setq proced-auto-update-flag t
	   proced-auto-update-interval 2
	   proced-filter 'user)
   #+END_SRC

** browser
   #+BEGIN_SRC emacs-lisp
     (if  (running-on-windows)
	 (setq browse-url-browser-function 'eww-browse-url)
       (setq browse-url-browser-function 'browse-url-chrome
	     browse-url-chrome-arguments '("--new-window")))
   #+END_SRC

** doc view
   #+BEGIN_SRC emacs-lisp
     (setq doc-view-continuous t
	   doc-view-resolution 300)
   #+END_SRC

** file backup info
   #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
					     ;'(("." . (if (file-directory-p "/var/emacs/") "/var/emacs/" "/tmp/")))    ; don't litter my fs tree
      '(("." . "/tmp/"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups

     (recentf-mode 1)
   #+END_SRC

** misc
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f6>")    #'calc)
     (global-set-key (kbd "<f7>")    #'calendar)
     (global-set-key (kbd "C-c C-c") #'compile)
     (global-set-key (kbd "C-c r")   #'revert-buffer)
     (global-set-key (kbd "\C-z")    #'bury-buffer)
     (global-set-key (kbd "\C-c v")  #'visual-line-mode)
     (global-set-key (kbd "\C-c t")  #'toggle-truncate-lines)

     (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
	   async-bytecomp-package-mode t
	   gdb-many-windows t
	   large-file-warning-threshold 500000000
	   send-mail-function 'smtpmail-send-it
	   message-directory "~/.emacs.d/Mail/"
					     ;tramp-histfile-override "/dev/null" nil (tramp)
	   )
     (add-to-list 'tramp-remote-path "/home/tsranso/bin")
     (add-to-list 'tramp-remote-path "/home/tsranso/.local/bin")
     (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

   #+END_SRC

* exwm

  #+BEGIN_SRC emacs-lisp
    (defun launch-program-with-sudo (command)
      (interactive (list (read-shell-command "(with sudo) $ ")))
      (start-process-shell-command command nil (concat "sudo " command)))

    (defun launch-program (command)
      (interactive (list (read-shell-command "$ ")))
      (start-process-shell-command command nil command))

    (defun lock-screen ()
      (interactive)
      (shell-command "/usr/local/bin/lock.sh"))

    (when (and (>= (string-to-number emacs-version) 24.4)
	       (not (running-on-hosts '("login001" "marcher" "atari"))))
      (use-package xelb
	:if (string= "exwm" (getenv "DESKTOP_SESSION"))
	:ensure t)

      (use-package exwm
	:if (string= "exwm" (getenv "DESKTOP_SESSION"))
	:ensure t
	:after (xelb)
	:bind
	(("s-x" . #'launch-program)
	 ("s-X" . #'launch-program-with-sudo)
	 ("s-l" . #'lock-screen)
	 ("s-w" . #'exwm-workplace-switch)
	 ("s-r" . #'exwm-reset)
	 ("C-x C-c" . #'save-buffers-kill-emacs))
	:config
	(setq exwm-input-simulation-keys
	      '(([?\C-b] . [left])
		([?\C-f] . [right])
		([?\C-p] . [up])
		([?\C-n] . [down])
		([?\C-a] . [home])
		([?\C-e] . [end])
		([?\M-v] . [prior])
		([?\C-v] . [next])
		([?\C-d] . [delete])
		([?\C-h] . [backspace])
		([?\C-m] . [return])
		([?\C-i] . [tab])
		([?\C-g] . [escape])
		([?\M-g] . [f5])
		([?\C-s] . [C-f])
		([?\C-y] . [C-v])
		([?\M-w] . [C-c])
		([?\M-<] . [home])
		;; todo ([?\M-o] . [C-x o])
		([?\M->] . [C-end])))

	(global-set-key (kbd "<mouse-12>") (lambda () (interactive)
					     (exwm-input--fake-key 26)))

	(dolist (k '(
		     ("s-," . "alternate-screen")
		     ("s-<return>" . "urxvtc")
		     ("s-p" . "nemo")
		     ("s-d" . "discord")
		     ("s-t" . "transmission-remote-gtk")
		     ("s-s" . "spotify")
		     ("s-<tab>" . "google-chrome-stable")
		     ("<C-M-escape>" . "gnome-system-monitor")
		     ("s-m" . "pavucontrol")
		     ("s-<down>" . "amixer sset Master 5%-")
		     ("s-<up>" . "amixer set Master unmute; amixer sset Master 5%+")
		     ("<print>" . "scrot")
		     ("<XF86MonBrightnessUp>" . "light -A 10")
		     ("<XF86MonBrightnessDown>" . "light -U 10")
		     ("<XF86AudioMute>"."amixer -c 0 set Master toggle")
		     ("<XF86AudioLowerVolume>" . "amixer -c 0 sset Master 5%-")
		     ("<XF86AudioRaiseVolume>" . "amixer -c 0 set Master unmute; amixer -c 0 sset Master 5%+")))
	  (let ((f (lambda () (interactive)
		     (save-window-excursion
		       (start-process-shell-command "" nil (cdr k))))))
	    (exwm-input-set-key (kbd (car k)) f)))

	(require 'exwm-systemtray)
	(exwm-systemtray-enable)

	(add-hook 'exwm-floating-setup-hook #'exwm-layout-hide-mode-line)
	(add-hook 'exwm-floating-exit-hook #'exwm-layout-show-mode-line)

	(add-hook 'exwm-update-title-hook
		  (lambda () (exwm-workspace-rename-buffer exwm-title)))

	(setq exwm-workspace-show-all-buffers t
	      exwm-layout-show-all-buffers t)

	(setq exwm-workspace-number 10)
	(dotimes (i exwm-workspace-number)
	  (exwm-input-set-key (kbd (format "s-%d" i))
			      `(lambda ()
				 (interactive)
				 (exwm-workspace-switch-create
				 (min (+ 5 ,i) ,i)))))

	(push ?\C-q exwm-input-prefix-keys)
	(define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

	(require 'exwm-randr)
	(setq exwm-randr-workspace-output-plist (workspace-screen-mapping))

	(when (running-on-hosts '("tengen"))
	  (add-hook 'exwm-randr-screen-change-hook
		    (lambda ()
		      (start-process-shell-command
		       "xrandr" nil
		       (concat "xrandr "
			       "--output HDMI-1 --mode 1920x1080 --pos 0x0 --rotate normal "
			       "--output DP-3 --mode 1920x1200 --pos 4320x624 --rotate normal "
			       "--output DP-2 --mode 1920x1200 --pos 3120x240 --rotate left "
			       "--output DP-1 --mode 1920x1200 --pos 1920x240 --rotate left "
			       "--output DVI-D-1 --mode 1920x1080 --pos 0x1080 --rotate normal ")))))
	(when (running-on-hosts '("hoshi"))
	  (add-hook 'exwm-randr-screen-change-hook
		    (lambda ()
		      (start-process-shell-command
		       "xrandr" nil
		       (concat "xrandr "
			       "--output HDMI-1 --mode 1920x1080 --pos 1920x0 "
			       "--output DP-2 --mode 1920x1080 --pos 3840x0 "
			       "--output DP-1 --primary --mode 1920x1080 --pos 0x0")))))

	(setq exwm-manage-configurations
	      '(((equal exwm-instance-name "discord") workspace 2)
		((equal exwm-instance-name "spotify") workspace 1)))

	(add-hook 'exwm-manage-finish-hook
		  (lambda ()
		    (when (and exwm-class-name
			       (string= exwm-class-name "urxvt"))
		      (exwm-input-set-local-simulation-keys '(([?\C-c ?\C-c] . ?\C-c))))))

	(exwm-randr-enable)
	(exwm-enable)))
  #+END_SRC

** Autostart programs

   I use this config across several machines, depending which machine and what network it's connected to I want different autostart applications.
   #+BEGIN_SRC emacs-lisp :noweb yes
     (when (running-on-hosts '("joseki"))
       (display-battery-mode t)
       ;; (start-process "" nil "xrdb" "-merge" "/home/tsranso/.config/urxvt/conf")
       (start-process "wifi applet" nil "nm-applet")

       (when (running-on-wireless '("Torus Shaped Earth\n"))
	 (launch-program "discord")
	 (launch-program "spotify")
	 (launch-program "transmission-daemon")))

     (when (and (running-on-hosts '("tengen"))
		(not (running-on-windows)))
       (launch-program "transmission-daemon"))

     (when (and (running-on-hosts '("hoshi" "tengen"))
		(not (running-on-windows)))
       (launch-program "discord")
       (launch-program "spotify"))

     (when (and (running-on-hosts '("joseki" "hoshi" "tengen"))
		(not (running-on-windows)))
       ;; (launch-program "redshift" "-l" "34.67:-82.84")
       (launch-program "urxvtd")
       (launch-program "blueman-applet"))

     ;; (when (not (running-on-hosts '("atari" "login*" "marcher" "tengen" "ivy*" "node*")))
     ;;   (launch-program "xautolock"
     ;; 		  "-time 10"
     ;; 		  "-locker lock.sh"))

     (when (and (not (running-on-hosts '("login*" "marcher" "ivy*" "node*")))
		(not (running-on-windows)))
       (launch-program "unclutter"))

   #+END_SRC

** system monitoring

   #+BEGIN_SRC emacs-lisp
     (use-package symon
       :ensure t
       :bind
       ("s-h" . symon-mode))
   #+END_SRC
** emacs server

   #+BEGIN_SRC emacs-lisp
     (when (running-on-hosts '("tengen" "joseki" "atari" "hoshi" "tsranso-ThinkPad-T430s"))
	   (server-start))
   #+END_SRC
