#+AUTHOR: Tim Ransom
#+TITLE: emacs configuration

* Add load path

  Here we start off with some black magic. Lexical bindings let me use a higher order functions when elisp's dynamic bindings don't. 
  #+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
  #+END_SRC

  Just a couple of functions to help sort what machine and network the config is being loaded on. So long as the emacs version is >24 I think this should be sufficient to use filter packages and settings between setups.
  #+BEGIN_SRC emacs-lisp
(defun running-on-hosts (hosts)
  (cl-member
   (car (split-string ; split the hostname on '.' for complex hostnames
	 (car (split-string ; remove trailing newline from `hostname`
	       (shell-command-to-string "hostname") "\n")) "\\."))
   hosts
   :test '(lambda (x y) (string-match-p y x))))

(defun running-on-wireless (essids)
  (member (shell-command-to-string "iwgetid --raw") essids))

(defun running-on-windows ()
  (string= system-type "windows-nt"))
  #+END_SRC

  And these are the functions to determine the workspace mappings to physical screens.
  #+BEGIN_SRC emacs-lisp
(defun workspace-string-mappings (x y)
  (if (= x 0) y
    (if (<= x y) x (% (- x (% (+ 10 y) y)) y))))

(defun number-to-monitor (x)
  (let ((y (- x 1))
	(host (shell-command-to-string "hostname")))
    (cond ((string= host "tengen\n")
	   (nth y
		'("HDMI-A-0" "DisplayPort-0" "DisplayPort-3" "DisplayPort-1" "DisplayPort-4" "DVI-D-0")
		))
	  ((string= host "atari\n") (nth y '("DP2" "DP1"))))))

(defun number-of-screens ()
  (string-to-number
   (shell-command-to-string
    "xrandr --listactivemonitors | grep Monitors | cut -d ' ' -f2")))

(defun flatten (list-of-lists)
  (apply #'append list-of-lists))

(defun workspace-screen-mapping ()
  (flatten (cl-loop for workspace in '(1 2 3 4 5 6 7 8 9 0)
		    collect (list workspace (number-to-monitor (workspace-string-mappings workspace (number-of-screens)))))))
  #+END_SRC

  I use syncthing to move some of the 'live' files emacs uses between machines. If I'm on a machine that hasn't had these folders made, create them.
  #+BEGIN_SRC emacs-lisp
(mapc (lambda (dir) (make-directory (concat user-emacs-directory dir) t))
      '("org" "emms" "gnus" ".sx" "hackernews"))
  #+END_SRC

  One last bootstrap, gotta load up use-package for good load times. This also adds any directories that might not be available through the usual methods like dired+.
  #+BEGIN_SRC emacs-lisp
(let ((default-directory  "~/.emacs.d/packages/"))
  (normal-top-level-add-subdirs-to-load-path))

(require 'use-package)
  #+END_SRC

* Packages
** Built In
*** rss with newsticker
    #+BEGIN_SRC emacs-lisp
(use-package newsticker
  :init
  (defun tim/browse-nt-text ()
    (interactive)
    (let ((browse-url-browser-function 'eww-browse-url))
      (newsticker-treeview-browse-url)))
  :bind (("C-c n" . #'newsticker-treeview)
	 :map newsticker-treeview-item-mode-map
	 ("t" . tim/browse-nt-text))
  :custom
  (newsticker-url-list
   '(("National Hurricane Center GIS Data (Atlantic)"
      "https://www.nhc.noaa.gov/gis-at.xml" nil nil nil)
     ("PHD Comics"
      "http://phdcomics.com/gradfeed.php" nil nil nil)
     ("Poorly Drawn Lines"
      "http://www.poorlydrawnlines.com/feed/" nil nil nil)
     ("Saturday Morning Breakfast Cereal"
      "http://www.smbc-comics.com/rss.php" nil nil nil)
     ("xkcd.com"
      "https://xkcd.com/rss.xml" nil nil nil)
     ("Things in Squares"
      "http://www.thingsinsquares.com/feed/" nil nil nil)
     ("News | TOP500 Supercomputer Sites"
      "https://www.top500.org/news/feeds/rss/" nil nil nil)
     ("Scott the Woz"
      "https://www.youtube.com/feeds/videos.xml?channel_id=UC4rqhyiTs7XyuODcECvuiiQ" nil nil nil)
     ("Bon Appetit"
      "https://www.youtube.com/feeds/videos.xml?channel_id=UCbpMy0Fg74eXXkvxJrtEn3w" nil nil nil)
     ("Game Grumps"
      "https://www.youtube.com/feeds/videos.xml?channel_id=UC9CuvdOVfMPvKCiwdGKL3cQ" nil nil nil)
     ("r/emacs"
      "https://reddit-top-rss.herokuapp.com/?subreddit=emacs&threshold=50&view=rss"  nil nil nil)
     ("NPR news"
      "https://www.npr.org/rss/rss.php?id=1001" nil nil nil)
     ("BBC News - Americas: World Edition"
      "http://newsrss.bbc.co.uk/rss/newsonline_world_edition/americas/rss.xml" nil nil nil)
     ("NPR Topics: Education"
      "http://www.npr.org/rss/rss.php?id=1013" nil nil nil)
     ("U.S. Department of Education"
      "https://www.ed.gov/feed" nil nil nil)
     ("AP Top Science News"
      "http://hosted.ap.org/lineups/SCIENCEHEADS-rss_2.0.xml?SITE=OHLIM&SECTION=HOME" nil nil nil)
     ("ScienceDaily Headlines"
      "http://feeds.sciencedaily.com/sciencedaily" nil nil nil)
     ("news@nature.com"
      "http://feeds.nature.com/nature/rss/current" nil nil nil)
     ("NASA Image of the Day"
      "https://www.nasa.gov/rss/dyn/lg_image_of_the_day.rss" nil nil nil)
     ("Wired Top Stories"
      "http://feeds.wired.com/wired/index" nil nil nil)
     ("New York Times - Technology"
      "http://feeds.nytimes.com/nyt/rss/Technology" nil nil nil)
     ("NPR: Technology"
      "http://www.npr.org/rss/rss.php?id=1019" nil nil nil)
     ("Steam Games"
      "https://cdn-e.steamprices.com/us/rss/free.xml" nil nil nil)
     ;; ("Carolina Hurricanes News"
     ;;  "https://www.nhl.com/hurricanes/news/rss.xml"
     ;;  nil nil nil)
     ;; ("Blue Jackets News"
     ;;  "https://www.nhl.com/bluejackets/news/rss.xml"
     ;;  nil nil nil)
     ;; ("Flyers News"
     ;;  "https://www.nhl.com/flyers/news/rss.xml"
     ;;  nil nil nil)
     ("NHL News" "http://www.nhl.com/rss/news.xml" nil nil nil)
     ))
  :config
  (newsticker-start)
  (newsticker-start-ticker))
(setq shr-color-visible-luminance-min 80)
(setq shr-color-visible-distance-min 8)
    #+END_SRC

*** elisp
    #+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :hook elisp-mode)

(use-package elisp-mode
  :bind
  (("C-x C-e" . pp-eval-last-sexp)
   ("<C-M-backspace>" . backward-kill-sexp))
  :config (enable-paredit-mode))
    #+END_SRC
*** org
    #+BEGIN_SRC emacs-lisp
(use-package org
  :bind
  (("C-c a" . #'org-agenda)
   ("C-c c" . #'org-capture)
   ("C-c 1" . #'org-encrypt-entry)
   ("C-c 2" . #'org-decrypt-entry)
   (:map org-mode-map
	 (("C-c r" . #'org-archive-subtree)
	  ("C-c C-r" . #'org-archive-subtree))))
  :custom
  (org-pretty-entities t)
  (org-agenda-files
   
   '("/home/tsranso/.emacs.d/org/SoC-gcal.org" 
     "/home/tsranso/.emacs.d/org/ransomtim8078-gcal.org" 
     "/home/tsranso/.emacs.d/org/schedule.org" 
     "/home/tsranso/.emacs.d/org/scratch.org" 
     "/home/tsranso/.emacs.d/org/todo.org" 
     "/home/tsranso/.emacs.d/org/brain/brain.org"
     "/home/tsranso/.emacs.d/org/tsranso-gcal.org"))
  (org-agenda-include-diary t)

  (diary-file "~/.emacs.d/org/schedule.org")
  (org-agenda-use-time-grid nil)
  (org-archive-location "~/.emacs.d/org/archive.org::* From %s")
  (org-capture-after-finalize-hook nil)
  (org-capture-templates '(("t" "Todo" entry
			    (file+headline "~/.emacs.d/org/todo.org" "Tasks")
			    "* TODO %?\nEntered on %T\n%i\n%a")
			   ("e" "Event" entry
			    (file "~/.emacs.d/org/schedule.org")
			    "* %?\nDate %^t")
			   ("b" "Fix Bug" checkitem
			    (file+headline "~/.emacs.d/org/todo.org" "Bugs")
			    "[ ] %?\n%A\nEntered on %T")
			   ("j" "Journal entry" entry (function org-journal-find-location)
			    "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
			   ("c" "Clipboard" entry (file+headline "~/.emacs.d/org/todo.org" "Collect")
			    "* TODO %^{Description}\n\n:PROPERTIES:\n:CREATED:\nAdded from Clipboard: %U\n\n:END:\n\n%x\n")
			   ("n" "General notes" entry
			    (file+headline "~/.emacs.d/org/scratch.org" "Notes")
			    "* Note %?\n%T\n")
			   ("a" "Appointment" entry (file  "~/.emacs.d/org/ransomtim8078-gcal.org" )
			    "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")))
  (org-return-follows-link t)
  (org-clock-sound t)
  (org-log-note-clock-out t)
  (org-clock-in-resume t)
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-out-when-done t)
  (org-clock-persist t)
  (org-clock-persist-query-resume nil)
  (org-src-preserve-indentation t)
  (org-confirm-babel-evaluate nil)
  (org-datetree-add-timestamp 'inactive)
  (org-default-notes-file "~/.emacs.d/org/todo.org")
  (org-directory "~/.emacs.d/org")
  (org-hide-leading-stars t)
  (org-highlight-latex-and-related '(latex))
  (org-log-done 'time)
  (org-outline-path-complete-in-steps nil)
  (org-preview-latex-image-directory "~/.emacs.d/ltxpng/")
  (org-refile-targets '((org-agenda-files :maxlevel . 2)))
  (org-refile-use-outline-path 'file)
  (org-src-fontify-natively t)
  (org-src-tab-acts-natively t)
  (org-startup-with-latex-preview t)
  (org-latex-listings 'minted)
  (org-latex-packages-alist '(("" "minted")))
  (org-todo-keyword-faces
   '(("SOON"
      :foreground "blue"
      :background "sky blue"
      :weight bold)
     ("DONE"
      :foreground "darkseagreen4"
      :background "darkseagreen2"
      :weight bold)))
  (org-todo-keywords '((sequence "TODO" "SOON" "DONE")))

  :config
  (require 'org-tempo)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (awk . t)
     (C . t)
     (ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (haskell . t)
     (java . t)
     (latex . t)
     (lisp . t)
     (makefile . t)
     (makefile . t)
     (python . t)
     (scheme . t)
     (shell . t)
     (sql . t)
     (sqlite . t)))

  (require 'org-crypt)
  (org-crypt-use-before-save-magic))
    #+END_SRC

**** org brain

#+BEGIN_SRC emacs-lisp


(use-package org-brain
  ;;  :load-path "packages/org-brain"
  :ensure t
  :init
  (setq org-brain-path "~/.emacs.d/org/brain")
  :bind ("C-c b" . #'helm-brain)
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/org/brain/.org-id-locations")
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12)
  (setq org-brain-include-file-entries nil
        org-brain-file-entries-use-title nil)
  (setq org-brain-include-file-entries nil)
  (setq org-brain-file-entries-use-title nil)
  (setq org-brain-headline-entry-name-format-string "%2$s")

  (setq my/default-org-brain-file "brain")

  (setq org-brain-file-from-input-function
	(lambda (x) (if (cdr x) (car x) my/default-org-brain-file))))

(use-package polymode :ensure t
  :config
  (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode))

#+END_SRC
**** Journaling
     Thus far I've made it easy to quickly capture ideas and tasks, not so much on
     the analysis phase:

     - What was accomplished today?
     - What are some notably bad habits? Good habits?
     - What are some future steps?

     Rather than overloading the capture mechanism for such thoughts, let's employ
     ~org-journal~ ---journal entries are stored in files such as ~journal/20190407~,
     where the file name is simply the date, or only one file per year as I've set it
     up below.  Each entry is the week day, along with the date, then each child tree
     is an actual entry with a personal title preceded by the time the entry was
     made.  Unlike capture and its agenda support, journal ensures entries are
     maintained in chronological order with calendar support.

     Since org files are plain text files, an entry can be written anywhere and later
     ported to the journal.

     The separation of concerns is to emphasise the capture stage as being quick and
     relatively mindless, whereas the journaling stage as being mindful.  Even though
     we may utilise capture to provide quick support for including journal entries, I
     have set my journal to be on a yearly basis ---one file per year--- since I want
     to be able to look at previous entries when making the current entry; after all,
     it's hard to compare and contrast easily unless there's multiple entries opened
     already.

     As such, ideally at the end of the day, I can review what has happened, and what
     has not, and why this is the case, and what I intend to do about it, and what
     problems were encountered and how they were solved ---in case the problem is
     encountered again in the future.  *Consequently, if I encounter previously
     confronted situations, problems,* *all I have to do is reread my journal to get an
     idea of how to progress.* Read more about [[https://www.google.com/search?q=on+the+importance+of+reviwing+your+day+daily&oq=on+the+importance+of+reviwing+your+day+daily&aqs=chrome..69i57.367j0j7&sourceid=chrome&ie=UTF-8][the importance of reviewing your day on
     a daily basis]].

     Moreover, by journaling with Org on a daily basis, it can be relatively easy to
     produce a report on what has been happening recently, at work for example. I'd
     like to have multiple journals, for work and for personal life, as such I will
     utilise a prefix argument to obtain my work specific entries.

     Anyhow, the setup:
     #+begin_src emacs-lisp
(defun my/org-journal-new-entry (prefix)
  "Open today’s journal file and start a new entry.

	 With a prefix, we use the work journal; otherwise the personal journal."
  (interactive "P")
  (-let [org-journal-file-format (if prefix "Work-%Y-%m-%d" org-journal-file-format)]
    (org-journal-new-entry nil)
    (org-mode)))

(use-package org-journal
  ;; C-u C-c j ⇒ Work journal ;; C-c C-j ⇒ Personal journal
  :ensure t
  :bind (("C-c j" . my/org-journal-new-entry))
  :config
  (setq org-journal-dir "~/.emacs.d/org/journal"
	org-journal-file-type   'yearly
	org-journal-file-format "Personal-%Y-%m-%d"))

(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))

(setq org-capture-templates '())
     #+end_src

     Bindings available in ~org-journal-mode~, when journaling:
     - ~C-c C-j~: Insert a new entry into the current journal file.
       - Note that keys for ~org-journal-new-entry~ shadow those for ~org-goto~.
     - ~C-c C-s~: Search the journal for a string.
       - Note that keys for ~org-journal-search~ shadow those for ~org-schedule~.

     All journal entries are registered in the Emacs Calendar.  To see available
     journal entries do ~M-x calendar~.  Bindings available in the calendar-mode:

     - ~j~: View an entry in a new buffer.
     - ~i j~: ‘I’nsert a new ‘j’ournal entry into the day’s file.
     - ~f w/m/y/f/F~: ‘F’ind, search, in all entries of the current week, month, year, all of time,
       of in all entries in the future.

**** Pomodoro

     #+begin_src emacs-lisp
;; Tasks get a 25 minute count down timer
(setq org-timer-default-timer 25)

;; Use the timer we set when clocking in happens.
(add-hook 'org-clock-in-hook
	  (lambda () (org-timer-set-timer '(16))))

;; unless we clocked-out with less than a minute left,
;; show disappointment message.
(add-hook 'org-clock-out-hook
	  (lambda ()
	    (unless (s-prefix? "0:00" (org-timer-value-string))
	      (message-box "The basic 25 minutes on this difficult task are not up; don't give up hope."))
	    (org-timer-stop)))
     #+end_src

**** update gnome memo with active clock

     Requires gnome desktop with [[https://extensions.gnome.org/extension/974/short-memo/][short-memo]] installed, and the [[https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep][google chrome gnome integration extension]].

     #+BEGIN_SRC emacs-lisp
(add-hook
 'org-mode-hook
 (lambda ()

   ;; Org clock string to Gnome top bar. Needs :
   ;; https://extensions.gnome.org/extension/974/short-memo/
   (defun current-task-to-status ()
     (interactive)
     (if (fboundp 'org-clocking-p)
	 (if (org-clocking-p)
	     (call-process "dconf" nil nil nil "write"
			   "/org/gnome/shell/extensions/short-memo/message"
			   (concat "'" (org-clock-get-clock-string) "'"))
	   (call-process "dconf" nil nil nil "write"
			 "/org/gnome/shell/extensions/short-memo/message"
			 "'No active clock'"))))
   ;; update clock message every minute
   (run-with-timer 0 60 'current-task-to-status)

   ;; update clock immediately on clock-in / clock-out
   (defun my-org-clock-message (old-function &rest arguments)
     (apply old-function arguments)
     (current-task-to-status))
   (advice-add #'org-clock-in :around #'my-org-clock-message)
   (advice-add #'org-clock-out :around #'my-org-clock-message)))
     #+END_SRC
**** geiser for scheme babel

#+BEGIN_SRC emacs-lisp
(use-package geiser :ensure t
  :custom
  (geiser-active-implementations '(mit)))
#+END_SRC
**** org exports
     #+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t
  :after ox)

(use-package ox-beamer
  :after ox)
     #+END_SRC

**** IEEE latex class

     #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
	       '("IEEEtran"
		 "\\documentclass[11pt]{IEEEtran}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
     #+END_SRC

**** MLA latex class
     #+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
	       '("mla"
		 "\\documentclass{mla}")))
     #+end_src

**** org-noter
     #+BEGIN_SRC emacs-lisp
(use-package org-noter
  :ensure t
  :custom
  (org-noter-auto-save-last-location t)
  (org-noter-always-create-frame nil)
  (org-noter-default-notes-file-names '("~/.emacs.d/org/reading.org"))
  (org-noter-notes-search-path '("~/.emacs.d/org/")))
     #+END_SRC

**** org-ref

     This needs the [[file:~/Documents/references.bib][references.bib]] file to be generated by zotero. Just export the entire library as bibtex there.

     #+BEGIN_SRC emacs-lisp
(use-package org-ref :ensure t :after org
  :config
  (setq org-latex-pdf-process
	'("latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -bibtex -output-directory=%o -f %f")
	;; org-ref-pdf-directory "./references/"
	org-ref-bibliography-notes "~/.emacs.d/org/reading.org"
	org-ref-default-bibliography '("~/Documents/references.bib"))

  (setq bibtex-completion-pdf-field "file")
  (setq bibtex-completion-bibliography '("~/Documents/references.bib"))
  
  
  (defun my/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
	   (key (car results))
	   (pdf-file (car (bibtex-completion-find-pdf key))))
      (if (file-exists-p pdf-file)
	  (org-open-file pdf-file)
	(message "No PDF found for %s" key))))
  (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point))
     #+END_SRC

**** async src blocks
     #+BEGIN_SRC emacs-lisp
(use-package ob-async
  :ensure t
  :after org)
     #+END_SRC

**** bullets
     #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
     #+END_SRC

*** erc

    IRC is a really valuable resource that is being used less and less. Having people to answer random technical questions is so nice when working on something and nobody around can help.
    #+BEGIN_SRC emacs-lisp
(use-package erc
  :custom
  (erc-autojoin-channels-alist (quote (("freenode.net"))))
  (erc-autojoin-mode nil)
  (erc-autojoin-timing (quote ident))
  (erc-hide-list (quote ("JOIN" "PART" "NICK" "QUIT")))
  (erc-hide-timestamps t)
  (erc-list-mode t)
  (erc-log-channels-directory "~/.emacs.d/erc_log")
  (erc-log-mode t)
  (erc-rename-buffers t)
  (erc-autojoin-channels-alist '(("freenode.net"
				  "#emacs"
				  "##linux"
				  "##categorytheory"
				  "##math"
				  "#latex"
				  "#orgmode")))
  (erc-log-write-after-insert t)
  (erc-log-write-after-send t)
  (erc-modules
   '(autojoin button completion dcc fill irccontrols keep-place
	      list log match menu move-to-prompt netsplit networks
	      noncommands notifications readonly ring services sound
	      stamp track))
  (erc-nick "tinhatcat")
  (erc-prompt "<tinhatcat>")
  (erc-sound-mode t))

;; This causes ERC to connect to the Freenode network upon hitting
;; C-c i f.  Replace MYNICK with your IRC nick.
(global-set-key "\C-cif" (lambda () (interactive)
			   (erc :server "irc.freenode.net" :port "6667"
				:nick "tinhatcat")))

;; This causes ERC to connect to the IRC server on your own machine (if
;; you have one) upon hitting C-c i l.  Replace MYNICK with your IRC
;; nick.  Often, people like to run bitlbee (http://bitlbee.org/) as an
;; AIM/Jabber/MSN to IRC gateway, so that they can use ERC to chat with
;; people on those networks.
(global-set-key "\C-cil" (lambda () (interactive)
			   (erc :server "localhost" :port "6667"
				:nick "tinhatcat")))

(use-package erc-image :ensure t :after erc)

(use-package erc-youtube :ensure t :after erc)

(use-package erc-twitch
  :disabled
  :after erc
  :config
  (setq erc-twitch-networks (quote ("irc.chat.twitch.tv")))
  (erc-twitch-mode))
    #+END_SRC

*** dired
    #+BEGIN_SRC emacs-lisp
(defun ransom/open-home ()
  (interactive)
  (dired (getenv "HOME")))

(use-package dired+
  :bind (:map dired-mode-map
	      (("M-h" . #'dired-omit-mode)
	       ("~" . #'ransom/open-home)
	       ("u" . #'dired-up-directory)))
  :custom
  (dired-listing-switches "-alh --no-group")
  (dired-no-confirm '(byte-compile copy delete))
  (dired-omit-files "^\\..*~?$")
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always))

(global-set-key (kbd "C-c d") (lambda () (interactive) (dired default-directory)))
    #+END_SRC
**** dired du
     #+BEGIN_SRC emacs-lisp
(use-package dired-du
  :ensure t
  :after dired)
     #+END_SRC

**** dired subtree

     #+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
     #+END_SRC

*** eshell
    #+BEGIN_SRC emacs-lisp
(defmacro with-face (str &rest properties)
  `(propertize ,str 'face (list ,@properties)))

(defun my-eshell-prompt ()
  (let ((header-bg (if (member 'material-light custom-enabled-themes)
		       "#e0f7fa"
		     "#1c1f26"))
	(host (file-remote-p default-directory 'host)))
    ;; (host (nth 1 (split-string (eshell/pwd) ":"))))
    (concat
     (with-face (concat (eshell/pwd) " ") :background header-bg)
     (with-face (format-time-string "(%H:%M) " (current-time)) :background header-bg :foreground "#888")
     (with-face "\n" :background header-bg)
     (with-face user-login-name :foreground "blue")
     "@"
     (with-face (if (eq nil host) "localhost" host) :foreground "green")
     (with-face (if (not (eq nil venv-current-name))
		    (concat " [" venv-current-name "]") "") :foreground "orange")
     (if (= (user-uid) 0)
	 (with-face " #" :foreground "red")
       " $")
     " ")))


(use-package eshell
  :bind ("C-x e" . #'eshell)
  :custom
  (eshell-destroy-buffer-when-process-dies t)
  (eshell-history-size 1000000)
  (eshell-prompt-function 'my-eshell-prompt)
  (eshell-highlight-prompt nil)
  (eshell-cmpl-ignore-case t)
  (eshell-highlight-prompt nil)
  (eshell-destroy-buffer-when-process-dies t)
  (eshell-visual-commands
   '("alsamixer"
     "glances" "gtop"
     "htop"
     "less"
     "more"
     "ncdu" "nethogs" "nmon"
     "pacmixer"
     "radeontop"
     "screen" "spt"
     "top" "tuir"
     "vi" "vim"
     "watch")))

(defun eshell-load--aliases ()
  "Reads bash aliases from Bash and inserts
      them into the list of eshell aliases."
  (interactive)
  (progn
    (message "Parsing aliases")
    (shell-command "alias" "bash-aliases" "bash-errors")
    (switch-to-buffer "bash-aliases")
    (replace-string "alias " "")
    (goto-char 1)
    (replace-string "='" " ")
    (goto-char 1)
    (replace-string "'\n" "\n")
    (goto-char 1)
    (let ((alias-name) (command-string) (alias-list))
      (while (not (eobp))
	(while (not (char-equal (char-after) 32))
	  (forward-char 1))
	(setq alias-name
	      (buffer-substring-no-properties (line-beginning-position) (point)))
	(forward-char 1)
	(setq command-string
	      (buffer-substring-no-properties (point) (line-end-position)))
	(setq alias-list (cons (list alias-name command-string) alias-list))
	(forward-line 1))
      (setq eshell-command-aliases-list alias-list))
    (if (get-buffer "bash-aliases")(kill-buffer "bash-aliases"))
    (if (get-buffer "bash-errors")(kill-buffer "bash-errors"))))

;; (add-hook 'eshell-mode-hook 'eshell-load-bash-aliases)
    #+END_SRC

*** vterm
     eshell doesn't handle python venvs well atm
     #+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :bind ("C-x v" . #'vterm))
    #+end_src

*** tramp
    #+BEGIN_SRC emacs-lisp
(require 'tramp)
(add-to-list 'tramp-remote-path "/home/tsranso/bin")
(add-to-list 'tramp-remote-path "/home/tsranso/.local/bin")
;; cache file-name forever
(setq remote-file-name-inhibit-cache nil)

;; make sure vc stuff is not making tramp slower
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
	      vc-ignore-dir-regexp
	      tramp-file-name-regexp))

;; not sure why we have this? just cargo-culting from an answer I saw
;; online.
(setq tramp-verbose 1)
    #+END_SRC

** External
*** the silver searcher
    #+begin_src emacs-lisp
(use-package ag :ensure t
  :bind ("C-c f" . #'ag)
  :custom (ag-highlight-search t))
    #+end_src

**** helm interface
    #+begin_src emacs-lisp
(use-package helm-ag :ensure t
  :bind ("C-c C-f" . #'helm-ag))
    #+end_src

*** Python stuff

Python shells can be spawned with the M-x run-python, but I have a little wrapper here to give me an access to python2. Yay legacy code
    #+begin_src emacs-lisp
(defun run-python-2.7 ()
  (interactive)
    (run-python "/usr/bin/python2.7"))
    #+end_src
**** virtual environment

     Use M-x =venv-workon= to activate virtualenvs and M-x =venv-deactivate= deactivate them.

     #+begin_src emacs-lisp
(use-package virtualenvwrapper
  :ensure t
  :after eshell
  :config
  (venv-initialize-interactive-shells) ;; if you want interactive shell support
  (venv-initialize-eshell) ;; if you want eshell support
  ;; note that setting `venv-location` is not necessary if you
  ;; use the default location (`~/.virtualenvs`), or if the
  ;; the environment variable `WORKON_HOME` points to the right place
  ;; (setq venv-location "/path/to/your/virtualenvs/")
  )
     #+end_src

*** disk usage
#+begin_src emacs-lisp
(use-package disk-usage :ensure t)
#+end_src
*** haskell mode
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :ensure t)
#+END_SRC

*** Package updater
    #+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :ensure t
  :custom
  (auto-package-update-prompt-before-update t)
  (auto-package-update-delete-old-versions t)
  (auto-package-update-interval 90)
  :config
  (auto-package-update-maybe))
    #+END_SRC
*** mu4e

    Requires a few things installed - w3m, isync, and the [[file:~/.emacs.d/org/dotfiles.org][dotfiles]] to be tangled
    #+BEGIN_SRC emacs-lisp
(use-package org-mime :ensure t)

(use-package w3m :ensure t
  :disabled
  :config
  (setq w3m-default-desplay-inline-images t))

(use-package mu4e
  :bind ("C-M-m" . #'mu4e)
  :custom
  (mu4e-maildir (expand-file-name "~/.emacs.d/Maildir"))
  (mu4e-attachment-dir "~/Downloads")
  (mu4e-change-filenames-when-moving t)
  (mu4e-compose-context-policy 'always-ask)
  (mu4e-compose-dont-reply-to-self t)
  (mu4e-confirm-quit nil)
  (mu4e-context-policy 'pick-first)
  (mu4e-use-fancy-chars nil)

  ;; (mu4e-compose-in-new-frame t)


  :config
  (setq mu4e-get-mail-command "mbsync -c ~/.mbsyncrc -a"
	;; mu4e-html2text-command "w3m -T text/html" ;; using the default mu4e-shr2text
	mu4e-view-prefer-html t
	mu4e-update-interval 3000
	mu4e-headers-auto-update t
	mu4e-compose-signature-auto-include nil
	mu4e-compose-format-flowed t)
  ;; to view selected message in the browser, no signin, just html mail
  (add-to-list 'mu4e-view-actions
	       '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; enable inline images
  (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; don't save message to Sent Messages, IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  ;; (add-hook 'mu4e-view-mode-hook #'visual-line-mode)

  ;; <tab> to navigate to links, <RET> to open them in browser
  (add-hook 'mu4e-view-mode-hook
	    (lambda()
	      ;; try to emulate some of the eww key-bindings
	      (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
	      (local-set-key (kbd "<tab>") 'shr-next-link)
	      (local-set-key (kbd "<backtab>") 'shr-previous-link)))

  ;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
  (add-hook 'mu4e-headers-mode-hook
	    (defun my/mu4e-change-headers ()
	      (interactive)
	      (setq mu4e-headers-fields
		    `((:human-date . 25) ;; alternatively, use :date
		      (:flags . 6)
		      (:from . 22)
		      (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
		      (:size . 7)))))

  ;; spell check
  (add-hook 'mu4e-compose-mode-hook
	    (defun my-do-compose-stuff ()
	      "My settings for message composition."
	      (visual-line-mode)
	      (org-mu4e-compose-org-mode)
	      (use-hard-newlines -1)
	      (flyspell-mode)))
  (mu4e-update-mail-and-index t))

(require 'smtpmail)

;;set up queue for offline email
;;use mu mkdir  ~/Maildir/acc/queue to set up first
(setq smtpmail-queue-mail nil)  ;; start in normal mode


(setq message-kill-buffer-on-exit t)

(use-package org-mu4e
  :load-path "packages/mu/mu4e")

;; convert org mode to HTML automatically
(setq org-mu4e-convert-to-html t)

;;from vxlabs config
;; show full addresses in view message (instead of just names)
;; toggle per name with M-RET
(setq mu4e-view-show-addresses 't)

;; mu4e-context
(setq mu4e-contexts
      (list
       (make-mu4e-context
	:name "Personal"
	:enter-func (lambda () (mu4e-message "Entering context personal"))
	:leave-func (lambda () (mu4e-message "Leaving context personal"))
	:match-func (lambda (msg)
		      (when msg
			(mu4e-message-contact-field-matches
			 msg '(:from :to :cc :bcc) "ransomtim8078@gmail.com")))
	:vars '((user-mail-address . "ransomtim8078@gmail.com")
		(user-full-name . "Tim Ransom")
		(mu4e-sent-folder . "/ransomtim8078/[Gmail]/Sent Mail")
		(mu4e-drafts-folder . "/ransomtim8078/[Gmail]/Drafts")
		(mu4e-trash-folder . "/ransomtim8078/[Gmail]/Trash")
		(mu4e-compose-signature . (concat "Formal Signature\n" "Emacs 26, org-mode 9, mu4e 1.0\n"))
		(mu4e-compose-format-flowed . t)
		(smtpmail-queue-dir . "~/.emacs.d/Maildir/ransomtim8078/queue/cur")
		(message-send-mail-function . smtpmail-send-it)
		(smtpmail-smtp-user . "ransomtim8078")
		(smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
		(smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
		(smtpmail-default-smtp-server . "smtp.gmail.com")
		(smtpmail-smtp-server . "smtp.gmail.com")
		(smtpmail-smtp-service . 587)
		(smtpmail-debug-info . t)
		(smtpmail-debug-verbose . t)
		(mu4e-maildir-shortcuts . ( ("/ransomtim8078/INBOX"            . ?i)
					    ("/ransomtim8078/[Gmail]/Sent Mail" . ?s)
					    ("/ransomtim8078/[Gmail]/Trash"       . ?t)
					    ("/ransomtim8078/[Gmail]/All Mail"  . ?a)
					    ("/ransomtim8078/[Gmail]/Starred"   . ?r)
					    ("/ransomtim8078/People/Katie"   . ?k)
					    ("/ransomtim8078/People/Dad"   . ?f)
					    ("/ransomtim8078/[Gmail]/Drafts"    . ?d)
					    ))))
       (make-mu4e-context
	:name "Clemson"
	:enter-func (lambda () (mu4e-message "Entering context work"))
	:leave-func (lambda () (mu4e-message "Leaving context work"))
	:match-func (lambda (msg)
		      (when msg
			(mu4e-message-contact-field-matches
			 msg '(:from :to :cc :bcc) "tsranso@g.clemson.edu")))
	:vars '((user-mail-address . "tsranso@g.clemson.edu")
		(user-full-name . "Tim Ransom")
		(mu4e-sent-folder . "/tsranso/[Gmail]/Sent Mail")
		(mu4e-drafts-folder . "/tsranso/[Gmail]/Drafts")
		(mu4e-trash-folder . "/tsranso/[Gmail]/Trash")
		(mu4e-compose-signature . (concat "-Tim Ransom\n"))
		(mu4e-compose-format-flowed . t)
		(smtpmail-queue-dir . "~/.emacs.d/Maildir/tsranso/queue/cur")
		(message-send-mail-function . smtpmail-send-it)
		(smtpmail-smtp-user . "tsranso")
		(smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
		(smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
		(smtpmail-default-smtp-server . "smtp.gmail.com")
		(smtpmail-smtp-server . "smtp.gmail.com")
		(smtpmail-smtp-service . 587)
		(smtpmail-debug-info . t)
		(smtpmail-debug-verbose . t)
		(mu4e-maildir-shortcuts . ( ("/tsranso/INBOX"            . ?i)
					    ("/tsranso/[Gmail]/Sent Mail" . ?s)
					    ("/tsranso/[Gmail]/Trash"     . ?t)
					    ("/tsranso/[Gmail]/All Mail"  . ?a)
					    ("/tsranso/[Gmail]/Starred"   . ?r)
					    ("/tsranso/[Gmail]/Drafts"    . ?d)
					    ))))))
    #+END_SRC

**** maildir summary
     #+begin_src emacs-lisp
(use-package mu4e-maildirs-extension
  :ensure t
  :after mu4e
  :custom
  (mu4e-maildirs-extension-hide-empty-maildirs t)
  :config
  (mu4e-maildirs-extension))
     #+end_src
**** modeline notification
     #+BEGIN_SRC emacs-lisp
(use-package mu4e-alert 
  :ensure t
  :after mu4e
  :hook ((after-init . mu4e-alert-enable-mode-line-display)
	 ;; (after-init . mu4e-alert-enable-notifications)
	 )
  :config (mu4e-alert-set-default-style 'libnotify))
     #+END_SRC
*** emoji support
    #+BEGIN_SRC emacs-lisp
(use-package emojify
  :ensure t
  :config
  (global-emojify-mode)
  :custom
  (emojify-composed-text-p nil))
    #+END_SRC
*** dmenu
    #+BEGIN_SRC emacs-lisp
(use-package dmenu
  :ensure t
  :bind (("s-x" . #'dmenu)))
    #+END_SRC

*** Dad-joke

    This is top tier package-age here.
    #+BEGIN_SRC emacs-lisp
(use-package dad-joke :ensure t)
    #+END_SRC

*** Theme

    I really like themes that have light and dark modes. The material theme fits that and has been my theme of choice for a few years.
    #+BEGIN_SRC emacs-lisp
(use-package material-theme
  :unless (running-on-hosts '("login001"))
  :ensure t
  :config
  (load-theme 'material t))
    #+END_SRC

    Switch between the light and dark modes on sunrise and sunset. Lets me know what the sun is doing even when I spend all day inside :)
    #+BEGIN_SRC emacs-lisp
(use-package theme-changer
  :unless (running-on-hosts '("login001"))
  :ensure t
  :custom
  (calendar-latitude 34.67)
  (calendar-location-name "Clemson, SC")
  (calendar-longitude -82.84)
  :config (change-theme 'material-light 'material))
    #+END_SRC

*** helm

    Helm is really a game changer for emacs. More over, it's the helm extensions that can really turn something tedious to easy.
    #+BEGIN_SRC emacs-lisp
(when (>= (string-to-number emacs-version) 24.4)
  (use-package helm
    :ensure t
    :bind (("M-x"   . #'helm-M-x)
	   ("<menu>"   . #'helm-M-x)
	   ("C-x b" . #'helm-buffers-list)
	   ("C-x f" . #'helm-find-files)
	   ("C-x C-f" . #'helm-find-files)
	   ("M-y"   . #'helm-show-kill-ring)
	   ("C-c m" . #'helm-man-woman)
	   ("C-c l" . #'helm-locate)
	   ("C-c e" . #'helm-regexp)
	   ("C-c g" . #'helm-google-suggest))
    :config
    (helm-mode t)))
    #+END_SRC
**** helm-google
     #+BEGIN_SRC emacs-lisp
(use-package helm-google :ensure t)
     #+END_SRC

**** helm-mu
     #+BEGIN_SRC emacs-lisp
(use-package helm-mu :ensure t)
(define-key mu4e-main-mode-map "s" 'helm-mu)
(define-key mu4e-headers-mode-map "s" 'helm-mu)
(define-key mu4e-view-mode-map "s" 'helm-mu)
     #+END_SRC

**** tramp

     Reads in [[file:~/.ssh/config][my ssh config]] and connects me without needing to remember the trmp syntax.
     #+BEGIN_SRC emacs-lisp
(when (>= (string-to-number emacs-version) 24.4)
  (use-package helm-tramp
    :unless (running-on-hosts '("login001"))
    :ensure t
    :requires helm))
     #+END_SRC

**** bbdb

     This seems to be the most accepted way to manage contact info with emacs. It works well with mail and gnus though so it's okay with me.
     #+BEGIN_SRC emacs-lisp
(when (>= (string-to-number emacs-version) 24.4)
  (use-package helm-bbdb
    :unless (running-on-hosts '("login001"))
    :ensure t
    :requires helm
    :bind (("<f5>" . #'helm-bbdb))))
     #+END_SRC

**** dictionary

     Every computer used for writing should have a dictionary available by keystroke.

     Also remember that =C-w= in a helm session inserts the word at point.
     #+BEGIN_SRC emacs-lisp
(when (>= (string-to-number emacs-version) 24.4)
  (use-package helm-dictionary
    :unless (running-on-hosts '("login001"))
    :requires helm
    :ensure t
    :bind (("<f8>" . #'helm-dictionary))
    :custom
    (helm-dictionary-browser-function 'browse-url-firefox)
    (helm-dictionary-database "/usr/share/dict/words")
    (helm-dictionary-online-dicts
     '(("wiktionary" . "http://en.wiktionary.org/wiki/%s")
       ("Oxford English Dictionary" . "www.oed.com/search?searchType=dictionary&q=%s")
       ("Merriam-Webster" . "https://www.merriam-webster.com/dictionary/%s")))
    (helm-dictionary-use-full-frame nil)))
     #+END_SRC

*** magit

    Great way to interact with git. Not much config needed, just a global keybinding to pop open the status.
    #+BEGIN_SRC emacs-lisp
(when (>= (string-to-number emacs-version) 25.1)
  (use-package magit
    :ensure t
    :unless (running-on-windows)
    :bind ("C-x g" . #'magit-status)
    :config
    (remove-hook 'server-switch-hook 'magit-commit-diff)))

(setq ediff-window-setup-function 'ediff-setup-windows-plain)
    #+END_SRC

*** pdf
    #+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :unless (running-on-hosts '("login001"))
  :load-path "site-lisp/pdf-tools/lisp"
  :magic ("%PDF" . pdf-view-mode)
  :custom
  (revert-without-query (quote ("$*\\.pdf")))
  :config
  (pdf-tools-install :no-query)
  (setq pdf-misc-print-programm "/usr/bin/gtklp")
  (defun pdf-view--rotate (&optional counterclockwise-p page-p)
    "Rotate PDF 90 degrees.  Requires pdftk to work.\n
Clockwise rotation is the default; set COUNTERCLOCKWISE-P to
non-nil for the other direction.  Rotate the whole document by
default; set PAGE-P to non-nil to rotate only the current page.
\nWARNING: overwrites the original file, so be careful!"
    ;; error out when pdftk is not installed
    (if (null (executable-find "pdftk"))
	(error "Rotation requires pdftk")
      ;; only rotate in pdf-view-mode
      (when (eq major-mode 'pdf-view-mode)
	(let* ((rotate (if counterclockwise-p "left" "right"))
	       (file   (format "\"%s\"" (pdf-view-buffer-file-name)))
	       (page   (pdf-view-current-page))
	       (pages  (cond ((not page-p)                        ; whole doc?
			      (format "1-end%s" rotate))
			     ((= page 1)                          ; first page?
			      (format "%d%s %d-end"
				      page rotate (1+ page)))
			     ((= page (pdf-info-number-of-pages)) ; last page?
			      (format "1-%d %d%s"
				      (1- page) page rotate))
			     (t                                   ; interior page?
			      (format "1-%d %d%s %d-end"
				      (1- page) page rotate (1+ page))))))
	  ;; empty string if it worked
	  (if (string= "" (shell-command-to-string
			   (format (concat "pdftk %s cat %s "
					   "output %s.NEW "
					   "&& mv %s.NEW %s")
				   file pages file file file)))
	      (pdf-view-revert-buffer nil t)
	    (error "Rotation error!"))))))
  (defun pdf-view-rotate-clockwise (&optional arg)
    "Rotate PDF page 90 degrees clockwise.  With prefix ARG, rotate
entire document."
    (interactive "P")
    (pdf-view--rotate nil (not arg)))

  (defun pdf-view-rotate-counterclockwise (&optional arg)
    "Rotate PDF page 90 degrees counterclockwise.  With prefix ARG,
rotate entire document."
    (interactive "P")
    (pdf-view--rotate :counterclockwise (not arg)))

  (define-key pdf-view-mode-map (kbd "R") 'pdf-view-rotate-clockwise)

  )
    #+END_SRC

*** epub
    #+BEGIN_SRC emacs-lisp
(use-package nov
  :ensure t
  :unless (or (string= nil (getenv "DESKTOP_SESSION"))
	      (running-on-hosts '("login001")))
  :magic ("%EPUB" . nov-mode)
  :config (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
    #+END_SRC

*** dashboard

    This dashboard pairs really well with exwm but has been a bit of a pain to set up.
    For now I'm still choosing an org-mode scratch buffer but this is a todo.
    #+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  ;; :if (getenv "DESKTOP_SESSION")
  :config
  (dashboard-setup-startup-hook)
  :custom
  (show-week-agenda-p t)
  (dashboard-items '((recents  . 5)
		     (agenda . 5)
		     (bookmarks . 5))))
;; todo: make (todos . 5) source
    #+END_SRC

*** transmission
    #+BEGIN_SRC emacs-lisp
(when (>= (string-to-number emacs-version) 24.4)
  (use-package transmission
    :disabled
    :ensure t
    :if (running-on-hosts '("joseki" "tengen"))
    :custom
    (transmission-host "10.202.140.134")
    (transmission-refresh-modes
     '(transmission-mode
       transmission-files-mode
       transmission-info-mode
       transmission-peers-mode))))
    #+END_SRC

*** spotify
    This just controls spotify, searching and account specific stuff still needs done through the desktop application.

    #+BEGIN_SRC emacs-lisp
(use-package spotify :ensure t
  :config
  (spotify-enable-song-notifications))
    #+END_SRC


    This one lets us search and control playback
#+BEGIN_SRC emacs-lisp
(use-package helm-spotify-plus :ensure t
  :bind
  (("C-c s s" .   #'helm-spotify-plus)  ;; s for SEARCH
   ("C-c s f" .   #'helm-spotify-plus-next)
   ("C-c s b" .   #'helm-spotify-plus-previous)
   ("C-c s p" .   #'helm-spotify-plus-play)
   ("C-c s SPC" . #'helm-spotify-plus-toggle-play-pause)
   ("C-c s g" .   #'helm-spotify-plus-pause)))
#+END_SRC

*** hackernews

    #+BEGIN_SRC emacs-lisp
(use-package hackernews
  :ensure t
  :bind ("C-c h" . #'hackernews))
    #+END_SRC

*** stack overflow

    #+BEGIN_SRC emacs-lisp
(use-package sx
  :ensure t
  :bind ("C-c x" . #'sx-tab-all-questions))
    #+END_SRC

*** wikipedia

    #+BEGIN_SRC emacs-lisp
(use-package wiki-summary
  :defer 1
  :bind ("C-c w" . wiki-summary)
  :ensure t
  :preface
  (defun my/format-summary-in-buffer (summary)
    "Given a summary, stick it in the *wiki-summary* buffer and display the buffer"
    (let ((buf (generate-new-buffer "*wiki-summary*")))
      (with-current-buffer buf
	(princ summary buf)
	(fill-paragraph)
	(goto-char (point-min))
	(text-mode)
	(view-mode))
      (pop-to-buffer buf))))

(advice-add 'wiki-summary/format-summary-in-buffer :override #'my/format-summary-in-buffer)
    #+END_SRC

*** emms
    #+BEGIN_SRC emacs-lisp
(use-package emms
  :disabled
  :if (running-on-hosts '("joseki" "tengen"))
  :ensure t
  :custom
  (emms-info-functions '(emms-info-mediainfo
			 emms-info-mpd emms-info-cueinfo
			 emms-info-ogginfo))
  (emms-source-file-default-directory "~/Music/"))
    #+END_SRC

**** emms mediainfo
#+begin_src emacs-lisp
(use-package emms-info-mediainfo
  :after emms
  :ensure t)
#+end_src
*** bbdb

    #+BEGIN_SRC emacs-lisp
(use-package bbdb
  :ensure t
  :custom
  (bbdb-dial-function
   (lambda
     (phone-number)
     (kdeconnect-send-sms
      (read-string "Enter message: ")
      (string-to-int
       (replace-regexp-in-string "[() -]" "" phone-number)))))
  :config
  (bbdb-initialize 'gnus 'message)
  (bbdb-insinuate-message)
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
  (setq
   bbdb-offer-save 1
   bbdb-use-pop-up t
   bbdb-electric-p t
   bbdb-popup-target-lines  1))
    #+END_SRC

*** slime

    Everybody who wants to dive into lisp should use slime. Even if just for learning differences between the lisps, slime is the way to go for lisp dev.
    #+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :custom
  (inferior-lisp-program "sbcl")
  (slime-contribs '(slime-fancy)))
    #+END_SRC

*** space mode line
    #+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t)

(use-package spaceline-config
  :ensure spaceline
  :config
  (spaceline-helm-mode 1)
  (spaceline-emacs-theme)
  (spaceline-toggle-org-clock-on)
  (spaceline-toggle-minor-modes-off)
  (spaceline-toggle-version-control-off))
    #+END_SRC

*** space mode line
    #+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t)

(use-package spaceline-config
  :ensure spaceline
  :config
  (spaceline-helm-mode 1)
  (spaceline-emacs-theme)
  (spaceline-toggle-org-clock-on)
  (spaceline-toggle-minor-modes-off)
  (spaceline-toggle-version-control-off))
    #+END_SRC

*** cmake

    #+BEGIN_SRC emacs-lisp
(use-package cmake-mode :ensure t)
    #+END_SRC

*** gnuplot

    #+BEGIN_SRC emacs-lisp
(use-package gnuplot :ensure t)
    #+END_SRC

*** deadgrep

    #+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :disabled
  ;; :ensure t
  :bind ("C-c g" . #'deadgrep))
    #+END_SRC
*** telegram

    #+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :disabled
  ;; :ensure t
  :bind ("C-c g" . #'deadgrep))
    #+END_SRC
*** Google Calendar

    #+BEGIN_SRC emacs-lisp
(use-package org-gcal
  :disabled
  :ensure t
  :config

  (setq org-gcal-client-id "819418314073-8pnmvge9jmpu6jf2hktbuo8m5gakuoeu.apps.googleusercontent.com"
	org-gcal-client-secret "lMo_aNdgaa-_dFWmzrBVi5VO"
	org-gcal-file-alist '(("ransomtim8078@gmail.com" .  "~/.emacs.d/org/ransomtim8078-gcal.org")
			      ("tsranso@g.clemson.edu" .  "~/.emacs.d/org/tsranso-gcal.org")
			      ("g.clemson.edu_h14th1n5kst3v1eq1mifc91bcg@group.calendar.google.com" . "~/.emacs.d/org/schedule.org")
			      ("socclemson@gmail.com" . "~/.emacs.d/org/SoC-gcal.org")))

  ;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-fetch) ))
  ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-fetch) ))
  (org-gcal-fetch)
  (org-save-all-org-buffers)
  (setq org-agenda-custom-commands
	'(("c" "Simple agenda view"
	   ((agenda "")
	    (alltodo ""))))))

    #+END_SRC

* Moving around

  Here are just about my only modifications to ordinary bindings. Mostly just convienience and intution things.
  #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c u")   #'org-babel-detangle)
(global-set-key (kbd "M-o")     #'other-window)
(global-set-key (kbd "M-h")     #'backward-kill-word)                   
(global-set-key (kbd "C-x k")   #'kill-this-buffer)                     
(global-set-key (kbd "C-x C-k") #'kill-this-buffer)                     
(global-set-key (kbd "C-h")     #'delete-backward-char)                 
(global-set-key (kbd "C-x 2")                                           
		(lambda ()                                              
		  (interactive)                                         
		  (split-window-vertically)                             
		  (other-window 1)))
(global-hl-line-mode t)
  #+END_SRC

  Flashes the cursor when a long jump is acted
  #+BEGIN_SRC emacs-lisp
(use-package beacon
  :if (display-graphic-p)
  :ensure t
  :config
  (beacon-mode 1))
  #+END_SRC

** focus follows mouse
   #+BEGIN_SRC emacs-lisp
(setq mouse-autoselect-window t
      focus-follows-mouse t)
   #+END_SRC

** which key
   #+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :custom (which-key-idle-delay 3.0)
  :config (which-key-mode))
   #+END_SRC

** smartparens

   #+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :hook (prog-mode . turn-off-smartparens-strict-mode))
   #+END_SRC

** Hide show minor mode

   #+BEGIN_SRC emacs-lisp
(use-package hs-minor-mode
  :hook prog-mode
  :bind (:map hs-minor-mode-map
	      ("C-c b h" . hs-hide-block)
	      ("C-c s" . hs-show-block)
	      ("C-c h" . hs-hide-block)
	      ("C-c b s" . hs-show-block)
	      ("C-c C-b h" . hs-hide-block)
	      ("C-c C-b s" . hs-show-block)))
   #+END_SRC

* Buffer Management

** ibuffer

   #+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure t
  :bind ("C-x C-b" . #'ibuffer)
  :config
  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size)))))

  ;; Modify the default ibuffer-formats
  (setq ibuffer-formats
	'((mark modified read-only " "
		(name 18 18 :left :elide)
		" "
		(size-h 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" "
		filename-and-process)))

  (setq mp/ibuffer-collapsed-groups (list "helm" "tramp" "process bufs"))

  (defadvice ibuffer (after collapse-helm)
    (dolist (group mp/ibuffer-collapsed-groups)
      (progn
	(goto-char 1)
	(when (search-forward (concat "[ " group " ]") (point-max) t)
	  (progn
	    (move-beginning-of-line nil)
	    (ibuffer-toggle-filter-group)))))
    (goto-char 1)
    (search-forward "[ " (point-max) t))

  (ad-activate 'ibuffer)

  :custom
  (ibuffer-default-sorting-mode 'major-mode)
  (ibuffer-saved-filter-groups
   '(("exwm"
      ("exwm" (mode . exwm-mode))
      ("dired" (mode . dired-mode))
      ("org" (or (mode . org-mode)
		 (filename . "OrgMode")))
      ("erc" (mode . erc-mode))
      ("magit" (name . "magit\*"))
      ("subversion" (name . "\*svn"))
      ("customize" (mode . Custom))
      ("latex" (mode . latex-mode))
      ("process bufs" (mode . comint-mode))
      ("PDF" (mode . pdf-view-mode))
      ("compilations" (mode . Compilation))
      ;; ("transmission" (or
      ;; (mode . Transmission)
      ;; (mode . Transmission-Info)
      ;; (mode . Transmission-Files))
      ("helm" (mode . helm-major-mode))
      ("compilation" (mode . compilation-mode))
      ("C files" (mode . c-mode))
      ("tramp" (name . "\*tramp\*"))
      ("command lines" (or (name . "\*eshell") (name . "vterm\*")))
      ("text searches" (or (mode . ag-mode)
			   (mode . grep-mode)))
      ("gnus" (or
	       (mode . message-mode)
	       (mode . bbdb-mode)
	       (mode . mail-mode)
	       (mode . gnus-group-mode)
	       (mode . gnus-summary-mode)
	       (mode . gnus-article-mode)
	       (name . "^\\.bbdb$")
	       (name . "^\\.newsrc-dribble")))
      ("help" (or (mode . Man-mode)
		  (name . "\*Help\*")
		  (name . "\*Apropos\*")
		  (name . "\*info\*"))))))
  (ibuffer-expert t)
  (ibuffer-show-empty-filter-groups nil)
  (ibuffer-formats
   '((mark modified read-only " "
	   (name 30 30 :left :elide)
	   " "
	   (size-h 9 -1 :right)
	   " "
	   (mode 16 16 :left :elide)
	   " " filename-and-process))))
   #+END_SRC

*** ibuffer hooks

    #+BEGIN_SRC emacs-lisp
(add-hook 'ibuffer-mode-hook
	  (lambda ()
	    (ibuffer-auto-mode 1)
	    (ibuffer-switch-to-saved-filter-groups "exwm")))
    #+END_SRC

** transpose windows

   Transposing is surprisingly not a built in function. Here's something that lets me move the current buffer around in the frame.
   #+BEGIN_SRC emacs-lisp
(defun transpose-windows (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
	    (next-win (window-buffer (funcall selector))))
	(set-window-buffer (selected-window) next-win)
	(set-window-buffer (funcall selector) this-win)
	(select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

(global-set-key (kbd "C-x t") #'transpose-windows)
   #+END_SRC

** toggle frame split

   Likewise switching from vertical to horizantal (and back). Really should be built it.
   #+BEGIN_SRC emacs-lisp
(defun toggle-frame-split ()
  "If the frame is split vertically, split it horizontally or vice versa.
     Assumes that the frame is only split into two."
  (interactive)
  (unless (= (length (window-list)) 2) (error "Can only toggle a frame split in two"))
  (let ((split-vertically-p (window-combined-p)))
    (delete-window) ; closes current window
    (if split-vertically-p
	(split-window-horizontally)
      (split-window-vertically))
    (switch-to-buffer nil)))

(global-set-key (kbd "C-x |") 'toggle-frame-split)
   #+END_SRC

** edit current buffer as root

   #+BEGIN_SRC emacs-lisp
(defun edit-as-su (&optional arg)
  "Edit currently visited file as root.

     With a prefix ARG prompt for a file to visit.
     Will also prompt for a file to visit if current
     buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
			 (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

(global-set-key (kbd "C-c o") #'edit-as-su)
   #+END_SRC

* general emacs settings
** asynchronous
   Gotta use the few async operations we have
   #+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :config
  (dired-async-mode 1)
  (async-bytecomp-package-mode 1))
   #+END_SRC

** time and date
   #+BEGIN_SRC emacs-lisp
(setq calendar-mark-diary-entries-flag t
      display-time-24hr-format t
      display-time-default-load-average nil)

(display-time-mode t)
   #+END_SRC

** window behavior
   #+BEGIN_SRC emacs-lisp
;; (setq 
;;       use-dialog-box nil
;;       line-number-mode t
;;       column-number-mode t)

(tooltip-mode 0)
;; (fringe-mode 1)
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
   #+END_SRC

   #+RESULTS:

** cursor behavior
   #+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t
      sentence-end-double-space nil
      tab-width 4)

(show-paren-mode t)
   #+END_SRC

** trash behavior
   #+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "/home/tsranso/.local/share/Trash/files/")
   #+END_SRC

** initialization
   #+BEGIN_SRC emacs-lisp
(setq 
					;initial-buffer-choice (lambda nil (get-buffer "*dashboard*"))
 initial-buffer-choice (lambda nil (get-buffer "*scratch*"))
 initial-major-mode 'org-mode
 initial-scratch-message (concat (format-time-string "%Y-%m-%d")
				 "

     "))
   #+END_SRC

** proced
   #+BEGIN_SRC emacs-lisp
(setq proced-auto-update-flag t
      proced-auto-update-interval 2
      proced-filter 'user)
   #+END_SRC

** browser
   #+BEGIN_SRC emacs-lisp
(if  (running-on-windows)
    (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-browser-function 'browse-url-firefox
	;; browse-url-firefox-arguments
	;; '("--new-window")
	;; '("")
	))
   #+END_SRC

** doc view
   #+BEGIN_SRC emacs-lisp
(setq doc-view-continuous t
      doc-view-resolution 300)
   #+END_SRC

** file backup info
   #+BEGIN_SRC emacs-lisp
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
					;'(("." . (if (file-directory-p "/var/emacs/") "/var/emacs/" "/tmp/")))    ; don't litter my fs tree
 '(("." . "/tmp/"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups

(recentf-mode 1)
   #+END_SRC

** misc
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f6>")    #'calc)
(global-set-key (kbd "<f7>")    #'calendar)
;; (global-set-key (kbd "C-c C-c") #'compile)
(global-set-key (kbd "C-c r")   #'revert-buffer)
(global-set-key (kbd "\C-z")    #'bury-buffer)
(global-set-key (kbd "\C-c v")  #'visual-line-mode)
(global-set-key (kbd "\C-c t")  #'toggle-truncate-lines)

(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      async-bytecomp-package-mode t
      gdb-many-windows t
      large-file-warning-threshold 500000000
      send-mail-function 'smtpmail-send-it
      message-directory "~/.emacs.d/Mail/"
					;tramp-histfile-override "/dev/null" nil (tramp)
      )

(set-default 'truncate-lines t)

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(global-auto-revert-mode 1)
(setq bookmark-default-file "~/.emacs.d/org/bookmarks")
(setq bbdb-file "~/.emacs.d/org/bbdb")
   #+END_SRC

   These are things that have popped up in my [[file:customize.el][customize.el]] that I probably added through the customize interface rather than use-package.
   #+BEGIN_SRC emacs-lisp
(setq helm-completion-style 'emacs
      epa-pinentry-mode 'loopback)
   #+END_SRC

* exwm

  #+BEGIN_SRC emacs-lisp
(defun launch-program-with-sudo (command)
  (interactive (list (read-shell-command "(with sudo) $ ")))
  (start-process-shell-command command nil (concat "sudo " command)))

(defun launch-program (command)
  (interactive (list (read-shell-command "$ ")))
  (start-process-shell-command command nil command))

(defun lock-screen ()
  (interactive)
  (shell-command "/usr/local/bin/lock.sh"))

(when (and (>= (string-to-number emacs-version) 24.4)
	   (not (running-on-hosts '("login001" "marcher"))))
  (use-package xelb
    :if (string= "exwm" (getenv "DESKTOP_SESSION"))
    ;; :ensure t
    )

  (use-package exwm
    :if (string= "exwm" (getenv "DESKTOP_SESSION"))
    ;; :ensure t
    :after (xelb)
    :bind
    (("s-x" . #'dmenu)
     ("s-X" . #'launch-program-with-sudo)
     ("s-l" . #'lock-screen)
     ("s-w" . #'exwm-workplace-switch)
     ("s-r" . #'exwm-reset)
     ("C-x C-c" . #'save-buffers-kill-emacs))
    :config
    (setq exwm-input-simulation-keys
	  '(([?\C-b] . [left])
	    ([?\C-f] . [right])
	    ([?\C-p] . [up])
	    ([?\C-n] . [down])
	    ([?\C-a] . [home])
	    ([?\C-e] . [end])
	    ([?\M-v] . [prior])
	    ([?\C-v] . [next])
	    ([?\C-d] . [delete])
	    ([?\C-h] . [backspace])
	    ([?\C-m] . [return])
	    ([?\C-i] . [tab])
	    ([?\C-g] . [escape])
	    ([?\M-g] . [f5])
	    ([?\C-s] . [C-f])
	    ([?\C-y] . [C-v])
	    ([?\M-w] . [C-c])
	    ([?\M-<] . [home])
	    ;; todo ([?\M-o] . [C-x o])
	    ([?\M->] . [C-end])))

    (global-set-key (kbd "<mouse-12>") (lambda () (interactive)
					 (exwm-input--fake-key 26)))

    (dolist (k '(
		 ("s-," . "alternate-screen")
		 ("s-<return>" . "kitty")
		 ("s-p" . "nautilus")
		 ("s-d" . "discord")
		 ("s-t" . "transmission-remote-gtk")
		 ("s-s" . "spotify")
		 ("s-z" . "zotero")
		 ("s-<tab>" . "firefox")
		 ("<C-M-escape>" . "gnome-system-monitor")
		 ("s-m" . "pavucontrol")
		 ("s-<down>" . "amixer sset Master 5%-")
		 ("s-<up>" . "amixer set Master unmute; amixer sset Master 5%+")
		 ("<print>" . "scrot")
		 ("<XF86MonBrightnessUp>" . "light -A 10")
		 ("<XF86MonBrightnessDown>" . "light -U 10")
		 ("<XF86AudioMute>"."amixer set Master toggle")
		 ("<XF86AudioLowerVolume>" . "amixer sset Master 5%-")
		 ("<XF86AudioRaiseVolume>" . "amixer set Master unmute; amixer sset Master 5%+")))
      (let ((f (lambda () (interactive)
		 (save-window-excursion
		   (start-process-shell-command "" nil (cdr k))))))
	(exwm-input-set-key (kbd (car k)) f)))

    (require 'exwm-systemtray)
    (exwm-systemtray-enable)

    (add-hook 'exwm-floating-setup-hook #'exwm-layout-hide-mode-line)
    (add-hook 'exwm-floating-exit-hook #'exwm-layout-show-mode-line)

    (add-hook 'exwm-update-title-hook
	      (lambda () (exwm-workspace-rename-buffer exwm-title)))

    (setq exwm-workspace-show-all-buffers t
	  exwm-layout-show-all-buffers t)

    (setq exwm-workspace-number 10)
    (dotimes (i exwm-workspace-number)
      (exwm-input-set-key (kbd (format "s-%d" i)) `(lambda () (interactive) (exwm-workspace-switch-create (min (+ 5 ,i) ,i))))
      (exwm-input-set-key (kbd (format "<s-kp-%d>" i)) `(lambda () (interactive) (exwm-workspace-switch-create (min (+ 5 ,i) ,i)))))

    (push ?\C-q exwm-input-prefix-keys)
    (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

    (start-process-shell-command "Gnome Settings Daemon" nil "/usr/lib/gsd-xsettings")
    (start-process-shell-command "Configure screens" nil "/home/tsranso/.screenlayout/all-screens.sh")
    ;; (start-process-shell-command "Caps lock control" nil "xmodmap ~/.Xmodmap")

    (require 'exwm-randr)
    (setq exwm-randr-workspace-output-plist (workspace-screen-mapping))

    (when (running-on-hosts '("atari"))
      (add-hook 'exwm-randr-screen-change-hook
		(lambda ()
		  (start-process-shell-command
		   "xrandr" nil
		   (concat "xrandr "
			   "--output DP1 --primary --mode 2560x1440 --pos 1080x225 --rotate normal "
			   "--output DP2 --mode 1920x1080 --pos 0x0 --rotate left")))))

    (when (running-on-hosts '("joseki"))
      (add-hook 'exwm-randr-screen-change-hook
		(lambda ()
		  (start-process-shell-command
		   "xrandr" nil
		   (concat "xrandr "
			   "--output LVDS1 --primary --mode 1600x900 --pos 0x0 --rotate normal")))))

    (setq exwm-manage-configurations
	  '(((equal exwm-instance-name "discord") workspace 2)
	    ((equal exwm-instance-name "spotify") workspace 1)))

    (add-hook 'exwm-manage-finish-hook
	      (lambda ()
		(when (and exwm-class-name
			   (string= exwm-class-name "kitty"))
		  (exwm-input-set-local-simulation-keys '(([?\C-c ?\C-c] . ?\C-c))))))

    (exwm-randr-enable)
    (exwm-enable)))
  #+END_SRC

** Autostart programs

   I use this config across several machines, depending which machine and what network it's connected to I want different autostart applications.
   #+BEGIN_SRC emacs-lisp :noweb yes
(when (running-on-hosts '("joseki"))
  (display-battery-mode t)
  ;; (start-process "" nil "xrdb" "-merge" "/home/tsranso/.config/urxvt/conf")
  ;; (start-process "wifi applet" nil "nm-applet")

  (when (running-on-wireless '("Torus Shaped Earth"))
    ;; (launch-program "discord")
    (launch-program "spotify --minimized")
    (launch-program "transmission-daemon")))

(when (and (running-on-hosts '("tengen"))
	   (not (running-on-windows)))
  (launch-program "transmission-daemon"))

(when (and (running-on-hosts '("hoshi" "tengen"))
	   (not (running-on-windows))
	   (string= "exwm" (getenv "DESKTOP_SESSION")))
  (launch-program "xmodmap /home/tsranso/.Xmodmap")
  (launch-program "teams")
  (launch-program "zoom")
  (launch-program "discord")
  (launch-program "spotify")
  (launch-program "steam")
  (launch-program "pocket-casts-linux")
  (launch-program "whatsapp-nativefier-dark")
  (launch-program "telegram-desktop")
)

(when (and (running-on-hosts '("joseki" "hoshi" "tengen"))
	   (not (running-on-windows)))
  ;; (launch-program "redshift" "-l" "34.67:-82.84")
  (launch-program "setxkbmap dvorak")
  (launch-program "xmodmap /home/tsranso/.Xmodmap")
  (launch-program "blueman-applet"))

;; (when (not (running-on-hosts '("atari" "login*" "marcher" "tengen" "ivy*" "node*")))
;;   (launch-program "xautolock"
;; 		  "-time 10"
;; 		  "-locker lock.sh"))

(when (and (not (running-on-hosts '("login*" "marcher" "ivy*" "node*")))
	   (not (running-on-windows)))
  (launch-program "unclutter"))

   #+END_SRC

** system monitoring

   #+BEGIN_SRC emacs-lisp
(use-package symon
  :ensure t
  :bind ("s-h" . symon-mode)
  :config (symon-mode))
   #+END_SRC
** emacs server

   #+BEGIN_SRC emacs-lisp
(when (running-on-hosts '("tengen" "joseki" "atari" "hoshi" "tsranso-ThinkPad-T430s"))
  (server-start))
   #+END_SRC
